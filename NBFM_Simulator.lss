
NBFM_Simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c6  00800100  000012e8  0000137c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  008002c6  008002c6  00001542  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00001558  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e2e  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000456  00000000  00000000  000034ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000835  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005b4  00000000  00000000  0000417c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000076d  00000000  00000000  00004730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011f5  00000000  00000000  00004e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3c       	cpi	r26, 0xC6	; 198
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a6 ec       	ldi	r26, 0xC6	; 198
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 35       	cpi	r26, 0x53	; 83
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 25 06 	call	0xc4a	; 0xc4a <main>
      9e:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
// }}}

//  Arrive here when either the A-line or the B-line changed polarity

ISR(PCINT2_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
    char bLine;
    char polarity;
    char eval;

    // sample the PIND register value;
    char sample = PIND;
      b8:	89 b1       	in	r24, 0x09	; 9

    // find out which line caused an interrupt
    char aLineChanged = (((sample ^ IntRotLines) & ALINEMASK) != 0);
      ba:	90 91 cb 02 	lds	r25, 0x02CB
      be:	98 27       	eor	r25, r24
      c0:	93 fb       	bst	r25, 3
      c2:	33 27       	eor	r19, r19
      c4:	30 f9       	bld	r19, 0
    // polarity is TRUE  when the A line caused the interrupt;
    // polarity is FALSE when the B line caused the interrupt;
    polarity = aLineChanged;

    // save current value of the lines;
    IntRotLines = sample;
      c6:	80 93 cb 02 	sts	0x02CB, r24

    aLine = (sample & ALINEMASK) != 0;
    bLine = (sample & BLINEMASK) != 0;
      ca:	84 fb       	bst	r24, 4
      cc:	22 27       	eor	r18, r18
      ce:	20 f9       	bld	r18, 0
    polarity = aLineChanged;

    // save current value of the lines;
    IntRotLines = sample;

    aLine = (sample & ALINEMASK) != 0;
      d0:	83 fb       	bst	r24, 3
      d2:	88 27       	eor	r24, r24
      d4:	80 f9       	bld	r24, 0
    bLine = (sample & BLINEMASK) != 0;
    eval = aLine ^ bLine;
      d6:	28 27       	eor	r18, r24
      d8:	80 91 49 03 	lds	r24, 0x0349
      dc:	90 91 4a 03 	lds	r25, 0x034A

    // eval now implements the truth table for an A line triggered interrupt
    // the B line has the exact opposite truth table, so we can simple XOR with 
    // the polarity value. (see documentation at the start of this ISR)
    
    if (eval ^ polarity)
      e0:	23 17       	cp	r18, r19
      e2:	11 f0       	breq	.+4      	; 0xe8 <__vector_5+0x42>
        SS_RotaryCount++;
      e4:	01 96       	adiw	r24, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <__vector_5+0x44>
    else
        SS_RotaryCount--; 
      e8:	01 97       	sbiw	r24, 0x01	; 1
      ea:	90 93 4a 03 	sts	0x034A, r25
      ee:	80 93 49 03 	sts	0x0349, r24
}
      f2:	9f 91       	pop	r25
      f4:	8f 91       	pop	r24
      f6:	3f 91       	pop	r19
      f8:	2f 91       	pop	r18
      fa:	0f 90       	pop	r0
      fc:	0f be       	out	0x3f, r0	; 63
      fe:	0f 90       	pop	r0
     100:	1f 90       	pop	r1
     102:	18 95       	reti

00000104 <__vector_1>:
// {{{ Selector Pulse

#ifndef TESTING

ISR(INT0_vect)
{
     104:	1f 92       	push	r1
     106:	0f 92       	push	r0
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	0f 92       	push	r0
     10c:	11 24       	eor	r1, r1
     10e:	8f 93       	push	r24
    // The selector line has gone low, so the button was pushed
    SS_SelectorPushed = TRUE;
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	80 93 3f 03 	sts	0x033F, r24
}
     116:	8f 91       	pop	r24
     118:	0f 90       	pop	r0
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti

00000122 <initIRQ>:
void initIRQ(void)
{
    // {{{ Rotary Dial Line A (PD3) and line B (PD4)

#ifdef NEWROTARY
    DDRD &= ~(1 << DDD3);     // Clear the PD3 ad PD4 in
     122:	53 98       	cbi	0x0a, 3	; 10
    DDRD &= ~(1 << DDD4);     // Clear the PD3 ad PD4 in
     124:	54 98       	cbi	0x0a, 4	; 10
    // PD3 (INT1 pin) is now an input
    // PD4 (INT? pin) is now an input

    PORTD |= (1 << PORTD3);    // turn On the Pull-up
     126:	5b 9a       	sbi	0x0b, 3	; 11
    PORTD |= (1 << PORTD4);    // turn On the Pull-up
     128:	5c 9a       	sbi	0x0b, 4	; 11
    // PD3 and PD4 now have pull-up enabled

    PCMSK2 = 0x18;  // enable pin change interrupts 19 en 20
     12a:	88 e1       	ldi	r24, 0x18	; 24
     12c:	80 93 6d 00 	sts	0x006D, r24
    PCICR  = 0x04;  // enable Pin Change Interrupt Enable 2
     130:	84 e0       	ldi	r24, 0x04	; 4
     132:	80 93 68 00 	sts	0x0068, r24
    // External Interrupt Control Register A
    // set Interrupt Sense Control ISC11 and ISC10 to 01 for dual edge trigger
    EICRA |= _BV(ISC10);  // set INT1 to trigger on ANY logic change
     136:	e9 e6       	ldi	r30, 0x69	; 105
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	84 60       	ori	r24, 0x04	; 4
     13e:	80 83       	st	Z, r24

    // External Interrupt Mask register
    EIMSK |= _BV(INT1);    // Turns on INT1
     140:	e9 9a       	sbi	0x1d, 1	; 29
#endif

    // }}}
    // {{{ Selector (PD2)

    DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
     142:	52 98       	cbi	0x0a, 2	; 10
    // PD2 (INT0 pin) is now an input

    PORTD |= (1 << PORTD2);    // turn on the pull-up
     144:	5a 9a       	sbi	0x0b, 2	; 11
    // PD2 is now an input with pull-up enabled

    // External Interrupt Control Register A
    // set Interrupt Sense Control ISC00 and ISC01 to 01 for falling edge trigger
    EICRA |= (1 << ISC01);    // set INT0 to trigger on a falling edge  
     146:	80 81       	ld	r24, Z
     148:	82 60       	ori	r24, 0x02	; 2
     14a:	80 83       	st	Z, r24
    // External Interrupt Mask register
    EIMSK |= (1 << INT0);     // Turns on INT0
     14c:	e8 9a       	sbi	0x1d, 0	; 29


    // }}}

    // Enable global interrupts
    sei(); 
     14e:	78 94       	sei
     150:	08 95       	ret

00000152 <initADC>:

// }}}
// {{{ void initADC(void)

void initADC(void)
{
     152:	08 95       	ret

00000154 <initIRQjpd>:

// }}}
// {{{ void initIRQjpd(void)

void initIRQjpd(void)
{
     154:	08 95       	ret

00000156 <initPORTS>:
void initPORTS(void)
{
#ifdef TESTING
#else
    // PORTB output for LCD
    DDRB = 0xff;
     156:	8f ef       	ldi	r24, 0xFF	; 255
     158:	84 b9       	out	0x04, r24	; 4
    PORTB = 0xff;
     15a:	85 b9       	out	0x05, r24	; 5

    // PORTC PC0-4 output, PC5 input
    DDRC = 0x1f;
     15c:	9f e1       	ldi	r25, 0x1F	; 31
     15e:	97 b9       	out	0x07, r25	; 7
    PORTC = 0x00;
     160:	18 b8       	out	0x08, r1	; 8

    // PORTD is input with pullup
    DDRD = 0x00;
     162:	1a b8       	out	0x0a, r1	; 10
    PORTD = 0xff;
     164:	8b b9       	out	0x0b, r24	; 11
     166:	08 95       	ret

00000168 <InputGetRotaryDialCount>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     168:	f8 94       	cli
#else
    register int rv;

    ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
        rv = SS_RotaryChange;
     16a:	80 91 d0 02 	lds	r24, 0x02D0
     16e:	90 91 d1 02 	lds	r25, 0x02D1
        SS_RotaryChange = 0;
     172:	10 92 d1 02 	sts	0x02D1, r1
     176:	10 92 d0 02 	sts	0x02D0, r1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     17a:	78 94       	sei
    }
    return rv;
#endif
}
     17c:	08 95       	ret

0000017e <InputGetSelectorPushed>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     17e:	f8 94       	cli
#else
    register int rv;

    ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
        rv = SS_SelectorPushed;
     180:	80 91 3f 03 	lds	r24, 0x033F
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     184:	78 94       	sei
    }
    return rv;
#endif
}
     186:	08 95       	ret

00000188 <InputGetShiftEnable>:
#ifdef TESTING
    return FALSE;
#else
    register char ioreg;
    // sample value from PTT switch input
    ioreg = PIND;
     188:	89 b1       	in	r24, 0x09	; 9
    // write boolean to system-state
    return (0 != (ioreg & (1<<SHIFTKEY)));
#endif
}
     18a:	86 95       	lsr	r24
     18c:	81 70       	andi	r24, 0x01	; 1
     18e:	08 95       	ret

00000190 <InputGetPTT>:
#ifdef TESTING
    return FALSE;
#else
    register char ioreg;
    // sample value from PTT switch input
    ioreg = PIND;
     190:	89 b1       	in	r24, 0x09	; 9
    // write boolean to system-state
    return (0 != (ioreg & (1<<PTT)));
#endif
}
     192:	81 70       	andi	r24, 0x01	; 1
     194:	08 95       	ret

00000196 <InputGetSMeter>:
char InputGetSMeter(void)
{
#ifdef TESTING
    return 0;
#else
    ADCSRA |= (1<<ADSC)|(1<<ADEN); 
     196:	80 91 7a 00 	lds	r24, 0x007A
     19a:	80 6c       	ori	r24, 0xC0	; 192
     19c:	80 93 7a 00 	sts	0x007A, r24
    while ((ADCSRA & (1<<ADSC))!=0);
     1a0:	80 91 7a 00 	lds	r24, 0x007A
     1a4:	86 fd       	sbrc	r24, 6
     1a6:	fc cf       	rjmp	.-8      	; 0x1a0 <InputGetSMeter+0xa>
    return ADC;
     1a8:	80 91 78 00 	lds	r24, 0x0078
     1ac:	90 91 79 00 	lds	r25, 0x0079
#endif
}
     1b0:	08 95       	ret

000001b2 <OutputSetVfoFrequency>:

// feb2016
// {{{ void OutputSetVfoFrequency(long int divider)

void OutputSetVfoFrequency(long int divider)
{
     1b2:	08 95       	ret

000001b4 <OutputSetPLLReference>:

// }}}
// {{{ void OutputSetPLLReference(long int reference)

void OutputSetPLLReference(long int reference)
{
     1b4:	08 95       	ret

000001b6 <OutputSetCtcssFreq>:

// }}}
// {{{ void OutputSetCtcssFreq(int ctcssFreq) 

void OutputSetCtcssFreq(int ctcssFreq)
{
     1b6:	08 95       	ret

000001b8 <OutputSetTransmitterOn>:

// }}}
// {{{ void OutputSetTransmitterOn(char value)

void OutputSetTransmitterOn(char value)
{
     1b8:	08 95       	ret

000001ba <OutputSetAudioMute>:

// }}}
// {{{ void OutputSetAudioMute(char mute)

void OutputSetAudioMute(char mute)
{
     1ba:	08 95       	ret

000001bc <OutputSetDisplaySMeter>:

// }}}
// {{{ void OutputSetDisplaySMeter(int sValue)

void OutputSetDisplaySMeter(int sValue)
{
     1bc:	08 95       	ret

000001be <OutputSetDisplayTxRxIndicator>:

// }}}
// {{{ void OutputSetDisplayTxRxIndicator(char indicator)

void OutputSetDisplayTxRxIndicator(char indicator)
{
     1be:	08 95       	ret

000001c0 <OutputSetDisplayMuteIndicator>:

// }}}
// {{{ void OutputSetDisplayMuteIndicator(char muted)

void OutputSetDisplayMuteIndicator(char muted)
{
     1c0:	08 95       	ret

000001c2 <lcdNib>:
    nibble = nibble & 0xF3; // clear low nibble
    nibble = nibble + bcpy; // combine log nibble of PORTB with high nibble of NIBBLE
    // nibble now containts the content of nibble + the original 4 low bits of PORTB
#endif

    PORTB = nibble;
     1c2:	85 b9       	out	0x05, r24	; 5
    sbi(PORTB, LCD_E);
     1c4:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	85 e0       	ldi	r24, 0x05	; 5
     1c8:	8a 95       	dec	r24
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcdNib+0x6>
     1cc:	00 00       	nop
    _delay_us(2);
    cbi(PORTB, LCD_E);
     1ce:	28 98       	cbi	0x05, 0	; 5
     1d0:	8f e8       	ldi	r24, 0x8F	; 143
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcdNib+0x12>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcdNib+0x18>
     1da:	00 00       	nop
     1dc:	08 95       	ret

000001de <lcdCmd>:

// }}}
// {{{ void lcdCmd(char c)

void lcdCmd(char c)
{
     1de:	cf 93       	push	r28
     1e0:	c8 2f       	mov	r28, r24
#ifdef TESTING
    deCmd(c);
#else
    lcdNib(c & 0xF0);
     1e2:	80 7f       	andi	r24, 0xF0	; 240
     1e4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdNib>
    lcdNib(c << 4);
     1e8:	8c 2f       	mov	r24, r28
     1ea:	82 95       	swap	r24
     1ec:	80 7f       	andi	r24, 0xF0	; 240
#endif
}
     1ee:	cf 91       	pop	r28
{
#ifdef TESTING
    deCmd(c);
#else
    lcdNib(c & 0xF0);
    lcdNib(c << 4);
     1f0:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <lcdNib>

000001f4 <lcdHome>:

// {{{ void lcdHome(void)

void lcdHome(void)
{
    lcdCmd(dispHOME);
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fa:	8f e3       	ldi	r24, 0x3F	; 63
     1fc:	9c e9       	ldi	r25, 0x9C	; 156
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcdHome+0xa>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcdHome+0x10>
     204:	00 00       	nop
     206:	08 95       	ret

00000208 <lcdData>:

// }}}
// {{{ void lcdData(char c)

void lcdData(char c)
{
     208:	cf 93       	push	r28
     20a:	c8 2f       	mov	r28, r24
#ifdef TESTING
    deData(c);
#else
    char t;

    t = c & 0xf0;   
     20c:	80 7f       	andi	r24, 0xF0	; 240
    t |= (1<<LCD_RS);   
    lcdNib(t);
     20e:	82 60       	ori	r24, 0x02	; 2
     210:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdNib>

    c <<= 4;
     214:	8c 2f       	mov	r24, r28
     216:	82 95       	swap	r24
     218:	80 7f       	andi	r24, 0xF0	; 240
    c |= (1<<LCD_RS);   
    lcdNib(c);
     21a:	82 60       	ori	r24, 0x02	; 2
#endif
}
     21c:	cf 91       	pop	r28
    t |= (1<<LCD_RS);   
    lcdNib(t);

    c <<= 4;
    c |= (1<<LCD_RS);   
    lcdNib(c);
     21e:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <lcdNib>

00000222 <lcdStr>:

// }}}
// {{{ void lcdStr(char *s)

void lcdStr(char *s)
{
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ec 01       	movw	r28, r24
    while (*s) 
     228:	89 91       	ld	r24, Y+
     22a:	88 23       	and	r24, r24
     22c:	19 f0       	breq	.+6      	; 0x234 <lcdStr+0x12>
        lcdData(*s++);
     22e:	0e 94 04 01 	call	0x208	; 0x208 <lcdData>
     232:	fa cf       	rjmp	.-12     	; 0x228 <lcdStr+0x6>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <initLCD>:

#endif
// }}}
// {{{ void initLCD(void)
void initLCD(void)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	60 97       	sbiw	r28, 0x10	; 16
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	2f ef       	ldi	r18, 0xFF	; 255
     250:	80 e7       	ldi	r24, 0x70	; 112
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	21 50       	subi	r18, 0x01	; 1
     256:	80 40       	sbci	r24, 0x00	; 0
     258:	90 40       	sbci	r25, 0x00	; 0
     25a:	e1 f7       	brne	.-8      	; 0x254 <initLCD+0x1a>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <initLCD+0x24>
     25e:	00 00       	nop
    // allow the lcd controller to wake up
    _delay_ms(100);

    // depending on intial state:
    // ... force to state 1 or state 3
    lcdNib(0x30);
     260:	80 e3       	ldi	r24, 0x30	; 48
     262:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdNib>
     266:	8f e1       	ldi	r24, 0x1F	; 31
     268:	9e e4       	ldi	r25, 0x4E	; 78
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <initLCD+0x30>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <initLCD+0x36>
     270:	00 00       	nop
    _delay_ms(10);

    // ... and force to state 1
    lcdNib(0x30);
     272:	80 e3       	ldi	r24, 0x30	; 48
     274:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcdNib>
     278:	8f e1       	ldi	r24, 0x1F	; 31
     27a:	9e e4       	ldi	r25, 0x4E	; 78
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <initLCD+0x42>
     280:	00 c0       	rjmp	.+0      	; 0x282 <initLCD+0x48>
     282:	00 00       	nop
    _delay_ms(10);

    // 4 bits mode, 2 lines
    lcdCmd(dispFUNC); // 0x20
     284:	80 e2       	ldi	r24, 0x20	; 32
     286:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdCmd>
     28a:	8f e1       	ldi	r24, 0x1F	; 31
     28c:	9e e4       	ldi	r25, 0x4E	; 78
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <initLCD+0x54>
     292:	00 c0       	rjmp	.+0      	; 0x294 <initLCD+0x5a>
     294:	00 00       	nop

    //lcdCmd(dispFUNC);
    //_delay_ms(10);

    // cursor shifts to right, text no shift
    lcdCmd(dispSHIF); // 0x18
     296:	88 e1       	ldi	r24, 0x18	; 24
     298:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdCmd>
     29c:	8f e3       	ldi	r24, 0x3F	; 63
     29e:	9c e9       	ldi	r25, 0x9C	; 156
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <initLCD+0x66>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <initLCD+0x6c>
     2a6:	00 00       	nop
    _delay_ms(20);

    // display on, no cursor, no blink
    lcdCmd(dispONOF); // 0x0C
     2a8:	8c e0       	ldi	r24, 0x0C	; 12
     2aa:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdCmd>
     2ae:	8f e3       	ldi	r24, 0x3F	; 63
     2b0:	9c e9       	ldi	r25, 0x9C	; 156
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <initLCD+0x78>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <initLCD+0x7e>
     2b8:	00 00       	nop
    _delay_ms(20);

    // shift mode
    lcdCmd(dispMODE); // 0x06
     2ba:	86 e0       	ldi	r24, 0x06	; 6
     2bc:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdCmd>
     2c0:	8f e3       	ldi	r24, 0x3F	; 63
     2c2:	9c e9       	ldi	r25, 0x9C	; 156
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <initLCD+0x8a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <initLCD+0x90>
     2ca:	00 00       	nop
    _delay_ms(20);

    // clear display
    // leave cursor at top left
    lcdCmd(dispCLEAR); // 0x01
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdCmd>
     2d2:	8f e3       	ldi	r24, 0x3F	; 63
     2d4:	9c e9       	ldi	r25, 0x9C	; 156
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <initLCD+0x9c>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <initLCD+0xa2>
     2dc:	00 00       	nop
    }
    }
     */

    // welcome message 
    lcdHome();
     2de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdHome>
     2e2:	8f e3       	ldi	r24, 0x3F	; 63
     2e4:	9c e9       	ldi	r25, 0x9C	; 156
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <initLCD+0xac>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <initLCD+0xb2>
     2ec:	00 00       	nop
    _delay_ms(20);

    //              0123456789ABCDEF
    char hello[] = "PA3BJI sw v0.5 ";
     2ee:	80 e1       	ldi	r24, 0x10	; 16
     2f0:	e8 ec       	ldi	r30, 0xC8	; 200
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	de 01       	movw	r26, r28
     2f6:	11 96       	adiw	r26, 0x01	; 1
     2f8:	01 90       	ld	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	8a 95       	dec	r24
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <initLCD+0xbe>
    lcdStr(hello);
     300:	ce 01       	movw	r24, r28
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	0e 94 11 01 	call	0x222	; 0x222 <lcdStr>
}
     308:	60 96       	adiw	r28, 0x10	; 16
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <lcdStr16>:

// }}}
// {{{ void lcdStr16(char *s)

void lcdStr16(char *s)
{
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	ec 01       	movw	r28, r24
     324:	8c 01       	movw	r16, r24
     326:	00 5f       	subi	r16, 0xF0	; 240
     328:	1f 4f       	sbci	r17, 0xFF	; 255
    short i=DISPLAY_WIDTH;
    while (i--)
     32a:	c0 17       	cp	r28, r16
     32c:	d1 07       	cpc	r29, r17
     32e:	21 f0       	breq	.+8      	; 0x338 <lcdStr16+0x1e>
        lcdData(*s++);
     330:	89 91       	ld	r24, Y+
     332:	0e 94 04 01 	call	0x208	; 0x208 <lcdData>
     336:	f9 cf       	rjmp	.-14     	; 0x32a <lcdStr16+0x10>
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <updateDisplay>:
{
#ifdef TESTING
    // set color to blue
    printf("\033[34m");
#endif
    lcdHome();
     342:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcdHome>
    lcdStr16(DisplayBuffer[0]);
     346:	82 ed       	ldi	r24, 0xD2	; 210
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	0e 94 8d 01 	call	0x31a	; 0x31a <lcdStr16>
#ifdef TESTING
    deSetCursorPosition(1,0);
#endif
    lcdStr16(DisplayBuffer[1]);
     34e:	87 ee       	ldi	r24, 0xE7	; 231
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	0e 94 8d 01 	call	0x31a	; 0x31a <lcdStr16>
    DisplayDirty = FALSE;
     356:	10 92 48 03 	sts	0x0348, r1
     35a:	08 95       	ret

0000035c <outputTrxBit>:
// }}}
// {{{ void outputTrxBit(void) 

void outputTrxBit(void)
{
    if (SS_Transmitting)
     35c:	80 91 0b 03 	lds	r24, 0x030B
     360:	88 23       	and	r24, r24
     362:	11 f0       	breq	.+4      	; 0x368 <outputTrxBit+0xc>
    {
        // set transmit bit
        sbi(PORTC, TXON);
     364:	43 9a       	sbi	0x08, 3	; 8
     366:	08 95       	ret
    } else {
        // clear transmit bit
        cbi(PORTC, TXON);
     368:	43 98       	cbi	0x08, 3	; 8
     36a:	08 95       	ret

0000036c <setDisplay>:

// {{{ void setDisplay(short row, char *string)

void setDisplay(short row, char *string)
{
    strncpy(DisplayBuffer[row], string, DISPLAY_WIDTH);
     36c:	25 e1       	ldi	r18, 0x15	; 21
     36e:	ac 01       	movw	r20, r24
     370:	24 9f       	mul	r18, r20
     372:	c0 01       	movw	r24, r0
     374:	25 9f       	mul	r18, r21
     376:	90 0d       	add	r25, r0
     378:	11 24       	eor	r1, r1
     37a:	40 e1       	ldi	r20, 0x10	; 16
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	8e 52       	subi	r24, 0x2E	; 46
     380:	9d 4f       	sbci	r25, 0xFD	; 253
     382:	0e 94 92 06 	call	0xd24	; 0xd24 <strncpy>
    DisplayDirty = TRUE;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 48 03 	sts	0x0348, r24
     38c:	08 95       	ret

0000038e <setCTCSSfreq>:

// }}}
// {{{ void setCTCSSfreq(void)

void  setCTCSSfreq(void)
{
     38e:	08 95       	ret

00000390 <setMuted>:
// {{{ void setMuted(void)

void setMuted()
{
    // Mute when signal to low or when transmitting
    if (SS_Muted || SS_Transmitting)
     390:	80 91 06 03 	lds	r24, 0x0306
     394:	81 11       	cpse	r24, r1
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <setMuted+0x10>
     398:	80 91 0b 03 	lds	r24, 0x030B
     39c:	88 23       	and	r24, r24
     39e:	91 f0       	breq	.+36     	; 0x3c4 <setMuted+0x34>
    {
        // set output mute bit
        sbi(PORTC, MUTE);
     3a0:	44 9a       	sbi	0x08, 4	; 8
        // Only show the 'M' symbol in the S-Meter during regular receive mode
        if ((menuLoopState == TUNING) && (!SS_Transmitting))
     3a2:	80 91 44 03 	lds	r24, 0x0344
     3a6:	90 91 45 03 	lds	r25, 0x0345
     3aa:	89 2b       	or	r24, r25
     3ac:	61 f4       	brne	.+24     	; 0x3c6 <setMuted+0x36>
     3ae:	80 91 0b 03 	lds	r24, 0x030B
     3b2:	81 11       	cpse	r24, r1
     3b4:	08 c0       	rjmp	.+16     	; 0x3c6 <setMuted+0x36>
        {
            DisplayBuffer[1][0] = 'M';
     3b6:	8d e4       	ldi	r24, 0x4D	; 77
     3b8:	80 93 e7 02 	sts	0x02E7, r24
            DisplayDirty = TRUE;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 48 03 	sts	0x0348, r24
     3c2:	08 95       	ret
        }
    }
    else
        // clear output mute bit
        cbi(PORTC, MUTE);
     3c4:	44 98       	cbi	0x08, 4	; 8
     3c6:	08 95       	ret

000003c8 <showFrequency>:
// }}}

// {{{ void showFrequency(short row, long freq)

void showFrequency(short row, long fr)
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24
    sprintf(Line, "VFO %4lu.%03lu MHz", fr/1000, fr%1000);
     3ce:	cb 01       	movw	r24, r22
     3d0:	ba 01       	movw	r22, r20
     3d2:	28 ee       	ldi	r18, 0xE8	; 232
     3d4:	33 e0       	ldi	r19, 0x03	; 3
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	7f 93       	push	r23
     3e4:	6f 93       	push	r22
     3e6:	5f 93       	push	r21
     3e8:	4f 93       	push	r20
     3ea:	3f 93       	push	r19
     3ec:	2f 93       	push	r18
     3ee:	28 ed       	ldi	r18, 0xD8	; 216
     3f0:	31 e0       	ldi	r19, 0x01	; 1
     3f2:	3f 93       	push	r19
     3f4:	2f 93       	push	r18
     3f6:	21 e2       	ldi	r18, 0x21	; 33
     3f8:	33 e0       	ldi	r19, 0x03	; 3
     3fa:	3f 93       	push	r19
     3fc:	2f 93       	push	r18
     3fe:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
    setDisplay(row,Line);
     402:	8d b7       	in	r24, 0x3d	; 61
     404:	9e b7       	in	r25, 0x3e	; 62
     406:	0c 96       	adiw	r24, 0x0c	; 12
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	9e bf       	out	0x3e, r25	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	8d bf       	out	0x3d, r24	; 61
     412:	61 e2       	ldi	r22, 0x21	; 33
     414:	73 e0       	ldi	r23, 0x03	; 3
     416:	ce 01       	movw	r24, r28
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
// {{{ void showFrequency(short row, long freq)

void showFrequency(short row, long fr)
{
    sprintf(Line, "VFO %4lu.%03lu MHz", fr/1000, fr%1000);
    setDisplay(row,Line);
     41c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <setDisplay>

00000420 <OutputSetDisplayFrequency>:

// }}}
// {{{ void OutputSetDisplayFrequency(long int freq)

void OutputSetDisplayFrequency(long int freq)
{
     420:	ab 01       	movw	r20, r22
     422:	bc 01       	movw	r22, r24
    showFrequency(0, freq);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <showFrequency>

0000042c <showCTCSSfreq>:

// }}}
// {{{ void showCTCSSfreq(char *prompt)

void showCTCSSfreq(char *prompt)
{
     42c:	48 2f       	mov	r20, r24
     42e:	e9 2f       	mov	r30, r25
    if (SS_CtcssFrequency == 0)
     430:	80 91 46 03 	lds	r24, 0x0346
     434:	90 91 47 03 	lds	r25, 0x0347
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	e1 f4       	brne	.+56     	; 0x474 <showCTCSSfreq+0x48>
        sprintf(Line, "%s%-*s", prompt, DISPLAY_WIDTH-2, "off");
     43c:	2b ee       	ldi	r18, 0xEB	; 235
     43e:	31 e0       	ldi	r19, 0x01	; 1
     440:	3f 93       	push	r19
     442:	2f 93       	push	r18
     444:	1f 92       	push	r1
     446:	8e e0       	ldi	r24, 0x0E	; 14
     448:	8f 93       	push	r24
     44a:	ef 93       	push	r30
     44c:	4f 93       	push	r20
     44e:	8f ee       	ldi	r24, 0xEF	; 239
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	9f 93       	push	r25
     454:	8f 93       	push	r24
     456:	81 e2       	ldi	r24, 0x21	; 33
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	9f 93       	push	r25
     45c:	8f 93       	push	r24
     45e:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
     462:	8d b7       	in	r24, 0x3d	; 61
     464:	9e b7       	in	r25, 0x3e	; 62
     466:	0a 96       	adiw	r24, 0x0a	; 10
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	9e bf       	out	0x3e, r25	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	8d bf       	out	0x3d, r24	; 61
     472:	08 95       	ret
    else
        sprintf(Line, "%s%3d.%d Hz%*s", prompt, SS_CtcssFrequency/10,SS_CtcssFrequency%10,DISPLAY_WIDTH-10," ");
     474:	28 e5       	ldi	r18, 0x58	; 88
     476:	32 e0       	ldi	r19, 0x02	; 2
     478:	3f 93       	push	r19
     47a:	2f 93       	push	r18
     47c:	1f 92       	push	r1
     47e:	26 e0       	ldi	r18, 0x06	; 6
     480:	2f 93       	push	r18
     482:	6a e0       	ldi	r22, 0x0A	; 10
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	7f 93       	push	r23
     490:	6f 93       	push	r22
     492:	ef 93       	push	r30
     494:	4f 93       	push	r20
     496:	86 ef       	ldi	r24, 0xF6	; 246
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	81 e2       	ldi	r24, 0x21	; 33
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
     4aa:	8d b7       	in	r24, 0x3d	; 61
     4ac:	9e b7       	in	r25, 0x3e	; 62
     4ae:	0e 96       	adiw	r24, 0x0e	; 14
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	9e bf       	out	0x3e, r25	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	8d bf       	out	0x3d, r24	; 61
     4ba:	08 95       	ret

000004bc <showTrx>:
// }}}
// {{{ void showTrx(void)

void showTrx(void)
{
    DisplayBuffer[1][DISPLAY_WIDTH-1] = (SS_Transmitting) ? 'T' : 'R';
     4bc:	80 91 0b 03 	lds	r24, 0x030B
     4c0:	88 23       	and	r24, r24
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <showTrx+0xc>
     4c4:	84 e5       	ldi	r24, 0x54	; 84
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <showTrx+0xe>
     4c8:	82 e5       	ldi	r24, 0x52	; 82
     4ca:	80 93 f6 02 	sts	0x02F6, r24
    DisplayDirty = TRUE;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 48 03 	sts	0x0348, r24
     4d4:	08 95       	ret

000004d6 <clearSMeter>:
// }}}
// {{{ void clearSMeter(void)

void clearSMeter(void)
{
    sprintf(DisplayBuffer[1],"%*s",DISPLAY_WIDTH," ");
     4d6:	88 e5       	ldi	r24, 0x58	; 88
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	1f 92       	push	r1
     4e0:	80 e1       	ldi	r24, 0x10	; 16
     4e2:	8f 93       	push	r24
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	9f 93       	push	r25
     4ea:	8f 93       	push	r24
     4ec:	87 ee       	ldi	r24, 0xE7	; 231
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
    DisplayDirty = TRUE;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 48 03 	sts	0x0348, r24
     4fe:	8d b7       	in	r24, 0x3d	; 61
     500:	9e b7       	in	r25, 0x3e	; 62
     502:	08 96       	adiw	r24, 0x08	; 8
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	9e bf       	out	0x3e, r25	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	8d bf       	out	0x3d, r24	; 61
     50e:	08 95       	ret

00000510 <bottomLinePrinter>:
// }}}

// {{{ void bottomLinePrinter(short index, char *prompt)

void bottomLinePrinter(short index, char *prompt)
{
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	9c 01       	movw	r18, r24
     516:	eb 01       	movw	r28, r22
    long val;

    if (((index & TYPEMASK) == MAINMENU) || ((index & TYPEMASK) == MAINMENU_VAL))
     518:	ac 01       	movw	r20, r24
     51a:	40 7c       	andi	r20, 0xC0	; 192
     51c:	fc 01       	movw	r30, r24
     51e:	ef 72       	andi	r30, 0x2F	; 47
     520:	ff 27       	eor	r31, r31
        val = menuValues[index & STATEMASK];
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31

void bottomLinePrinter(short index, char *prompt)
{
    long val;

    if (((index & TYPEMASK) == MAINMENU) || ((index & TYPEMASK) == MAINMENU_VAL))
     52a:	40 34       	cpi	r20, 0x40	; 64
     52c:	51 05       	cpc	r21, r1
     52e:	19 f0       	breq	.+6      	; 0x536 <bottomLinePrinter+0x26>
     530:	40 38       	cpi	r20, 0x80	; 128
     532:	51 05       	cpc	r21, r1
     534:	19 f4       	brne	.+6      	; 0x53c <bottomLinePrinter+0x2c>
        val = menuValues[index & STATEMASK];
     536:	e8 56       	subi	r30, 0x68	; 104
     538:	fe 4f       	sbci	r31, 0xFE	; 254
     53a:	02 c0       	rjmp	.+4      	; 0x540 <bottomLinePrinter+0x30>
    else
        val = subMenuValues1[index & STATEMASK];
     53c:	e4 57       	subi	r30, 0x74	; 116
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	60 81       	ld	r22, Z
     542:	71 81       	ldd	r23, Z+1	; 0x01
     544:	82 81       	ldd	r24, Z+2	; 0x02
     546:	93 81       	ldd	r25, Z+3	; 0x03

    // bottom line
    switch (index)
     548:	22 38       	cpi	r18, 0x82	; 130
     54a:	31 05       	cpc	r19, r1
     54c:	09 f4       	brne	.+2      	; 0x550 <bottomLinePrinter+0x40>
     54e:	63 c0       	rjmp	.+198    	; 0x616 <bottomLinePrinter+0x106>
     550:	4c f5       	brge	.+82     	; 0x5a4 <bottomLinePrinter+0x94>
     552:	25 34       	cpi	r18, 0x45	; 69
     554:	31 05       	cpc	r19, r1
     556:	44 f4       	brge	.+16     	; 0x568 <bottomLinePrinter+0x58>
     558:	23 34       	cpi	r18, 0x43	; 67
     55a:	31 05       	cpc	r19, r1
     55c:	cc f5       	brge	.+114    	; 0x5d0 <bottomLinePrinter+0xc0>
     55e:	22 34       	cpi	r18, 0x42	; 66
     560:	31 05       	cpc	r19, r1
     562:	09 f4       	brne	.+2      	; 0x566 <bottomLinePrinter+0x56>
     564:	58 c0       	rjmp	.+176    	; 0x616 <bottomLinePrinter+0x106>
     566:	a8 c0       	rjmp	.+336    	; 0x6b8 <bottomLinePrinter+0x1a8>
     568:	28 34       	cpi	r18, 0x48	; 72
     56a:	31 05       	cpc	r19, r1
     56c:	0c f0       	brlt	.+2      	; 0x570 <bottomLinePrinter+0x60>
     56e:	a4 c0       	rjmp	.+328    	; 0x6b8 <bottomLinePrinter+0x1a8>
            break;

        case MBACK :
        case MSCAN :
        case MSETTINGS :
            sprintf(Line, "%*s", DISPLAY_WIDTH, " ");
     570:	88 e5       	ldi	r24, 0x58	; 88
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	1f 92       	push	r1
     57a:	80 e1       	ldi	r24, 0x10	; 16
     57c:	8f 93       	push	r24
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	81 e2       	ldi	r24, 0x21	; 33
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
            break;
     592:	8d b7       	in	r24, 0x3d	; 61
     594:	9e b7       	in	r25, 0x3e	; 62
     596:	08 96       	adiw	r24, 0x08	; 8
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	9e bf       	out	0x3e, r25	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	8d bf       	out	0x3d, r24	; 61
     5a2:	a5 c0       	rjmp	.+330    	; 0x6ee <bottomLinePrinter+0x1de>
        val = menuValues[index & STATEMASK];
    else
        val = subMenuValues1[index & STATEMASK];

    // bottom line
    switch (index)
     5a4:	20 3c       	cpi	r18, 0xC0	; 192
     5a6:	31 05       	cpc	r19, r1
     5a8:	d1 f1       	breq	.+116    	; 0x61e <bottomLinePrinter+0x10e>
     5aa:	24 f4       	brge	.+8      	; 0x5b4 <bottomLinePrinter+0xa4>
     5ac:	25 38       	cpi	r18, 0x85	; 133
     5ae:	31 05       	cpc	r19, r1
     5b0:	7c f0       	brlt	.+30     	; 0x5d0 <bottomLinePrinter+0xc0>
     5b2:	82 c0       	rjmp	.+260    	; 0x6b8 <bottomLinePrinter+0x1a8>
     5b4:	21 15       	cp	r18, r1
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	34 07       	cpc	r19, r20
     5ba:	89 f1       	breq	.+98     	; 0x61e <bottomLinePrinter+0x10e>
     5bc:	21 30       	cpi	r18, 0x01	; 1
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	34 07       	cpc	r19, r20
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <bottomLinePrinter+0xb6>
     5c4:	4f c0       	rjmp	.+158    	; 0x664 <bottomLinePrinter+0x154>
     5c6:	21 3c       	cpi	r18, 0xC1	; 193
     5c8:	31 05       	cpc	r19, r1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <bottomLinePrinter+0xbe>
     5cc:	75 c0       	rjmp	.+234    	; 0x6b8 <bottomLinePrinter+0x1a8>
     5ce:	4a c0       	rjmp	.+148    	; 0x664 <bottomLinePrinter+0x154>
        case MSEND :
        case MSENDVAR :
#ifdef DBG_LOGGING
            fprintf(dbg,"point a\n");
#endif
            sprintf(Line, "%s%04ld.%03ld MHz", prompt, val/1000, val%1000);
     5d0:	28 ee       	ldi	r18, 0xE8	; 232
     5d2:	33 e0       	ldi	r19, 0x03	; 3
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	7f 93       	push	r23
     5e2:	6f 93       	push	r22
     5e4:	5f 93       	push	r21
     5e6:	4f 93       	push	r20
     5e8:	3f 93       	push	r19
     5ea:	2f 93       	push	r18
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	87 e1       	ldi	r24, 0x17	; 23
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	81 e2       	ldi	r24, 0x21	; 33
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
#ifdef DBG_LOGGING
            fprintf(dbg,"point b\n");
#endif
            break;
     604:	8d b7       	in	r24, 0x3d	; 61
     606:	9e b7       	in	r25, 0x3e	; 62
     608:	0e 96       	adiw	r24, 0x0e	; 14
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	9e bf       	out	0x3e, r25	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	8d bf       	out	0x3d, r24	; 61
     614:	6c c0       	rjmp	.+216    	; 0x6ee <bottomLinePrinter+0x1de>

        case MCTCSS :
        case MCTCSSVAR :
            showCTCSSfreq(prompt);
     616:	ce 01       	movw	r24, r28
     618:	0e 94 16 02 	call	0x42c	; 0x42c <showCTCSSfreq>
            //sprintf(Line, "%s%3d.%d Hz%*s", prompt, val/10, val%10, DISPLAY_WIDTH-10, " ");
            break;
     61c:	68 c0       	rjmp	.+208    	; 0x6ee <bottomLinePrinter+0x1de>
            sprintf(Line, "%*s", DISPLAY_WIDTH, " ");
            break;

        case MARETURNMODE :
        case MARETURNMODEVAR :
            sprintf(Line, "%s%-*s", prompt, DISPLAY_WIDTH-2, (SS_DirectMenuReturn) ? "to tuning" : "to menu");
     61e:	80 91 43 03 	lds	r24, 0x0343
     622:	88 23       	and	r24, r24
     624:	19 f0       	breq	.+6      	; 0x62c <bottomLinePrinter+0x11c>
     626:	25 e0       	ldi	r18, 0x05	; 5
     628:	32 e0       	ldi	r19, 0x02	; 2
     62a:	02 c0       	rjmp	.+4      	; 0x630 <bottomLinePrinter+0x120>
     62c:	2f e0       	ldi	r18, 0x0F	; 15
     62e:	32 e0       	ldi	r19, 0x02	; 2
     630:	3f 93       	push	r19
     632:	2f 93       	push	r18
     634:	1f 92       	push	r1
     636:	8e e0       	ldi	r24, 0x0E	; 14
     638:	8f 93       	push	r24
     63a:	df 93       	push	r29
     63c:	cf 93       	push	r28
     63e:	8f ee       	ldi	r24, 0xEF	; 239
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	81 e2       	ldi	r24, 0x21	; 33
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	9f 93       	push	r25
     64c:	8f 93       	push	r24
     64e:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
            break;
     652:	8d b7       	in	r24, 0x3d	; 61
     654:	9e b7       	in	r25, 0x3e	; 62
     656:	0a 96       	adiw	r24, 0x0a	; 10
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	9e bf       	out	0x3e, r25	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	8d bf       	out	0x3d, r24	; 61
     662:	45 c0       	rjmp	.+138    	; 0x6ee <bottomLinePrinter+0x1de>

        case MAREFFREQ :
        case MAREFFREQVAR :
            sprintf(Line, "%s%2ld.%03ld MHz%*s", prompt, val/1000, val%1000, DISPLAY_WIDTH-14, " ");
     664:	28 e5       	ldi	r18, 0x58	; 88
     666:	32 e0       	ldi	r19, 0x02	; 2
     668:	3f 93       	push	r19
     66a:	2f 93       	push	r18
     66c:	1f 92       	push	r1
     66e:	22 e0       	ldi	r18, 0x02	; 2
     670:	2f 93       	push	r18
     672:	28 ee       	ldi	r18, 0xE8	; 232
     674:	33 e0       	ldi	r19, 0x03	; 3
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	7f 93       	push	r23
     684:	6f 93       	push	r22
     686:	5f 93       	push	r21
     688:	4f 93       	push	r20
     68a:	3f 93       	push	r19
     68c:	2f 93       	push	r18
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	89 e2       	ldi	r24, 0x29	; 41
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	81 e2       	ldi	r24, 0x21	; 33
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
            break;
     6a6:	8d b7       	in	r24, 0x3d	; 61
     6a8:	9e b7       	in	r25, 0x3e	; 62
     6aa:	42 96       	adiw	r24, 0x12	; 18
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	9e bf       	out	0x3e, r25	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	8d bf       	out	0x3d, r24	; 61
     6b6:	1b c0       	rjmp	.+54     	; 0x6ee <bottomLinePrinter+0x1de>

        default : 
            sprintf(Line, "%s%-*ld", prompt, DISPLAY_WIDTH-2, val);
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	7f 93       	push	r23
     6be:	6f 93       	push	r22
     6c0:	1f 92       	push	r1
     6c2:	8e e0       	ldi	r24, 0x0E	; 14
     6c4:	8f 93       	push	r24
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	8d e3       	ldi	r24, 0x3D	; 61
     6cc:	92 e0       	ldi	r25, 0x02	; 2
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	81 e2       	ldi	r24, 0x21	; 33
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
     6de:	8d b7       	in	r24, 0x3d	; 61
     6e0:	9e b7       	in	r25, 0x3e	; 62
     6e2:	0c 96       	adiw	r24, 0x0c	; 12
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	9e bf       	out	0x3e, r25	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	8d bf       	out	0x3d, r24	; 61
    }
    setDisplay(1, Line);
     6ee:	61 e2       	ldi	r22, 0x21	; 33
     6f0:	73 e0       	ldi	r23, 0x03	; 3
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
            break;

        default : 
            sprintf(Line, "%s%-*ld", prompt, DISPLAY_WIDTH-2, val);
    }
    setDisplay(1, Line);
     6fa:	0c 94 b6 01 	jmp	0x36c	; 0x36c <setDisplay>

000006fe <showMenuItem>:
// {{{ void showMenuItem()

void showMenuItem()
{
    // top line
    switch (menuLoopState)
     6fe:	e0 91 44 03 	lds	r30, 0x0344
     702:	f0 91 45 03 	lds	r31, 0x0345
     706:	cf 01       	movw	r24, r30
     708:	85 54       	subi	r24, 0x45	; 69
     70a:	91 09       	sbc	r25, r1
     70c:	ef 72       	andi	r30, 0x2F	; 47
     70e:	ff 27       	eor	r31, r31

        default : 
#ifdef DBG_LOGGING
            fprintf(dbg,"point 3\n");
#endif
            sprintf(Line,"> Set %-*s",DISPLAY_WIDTH-6, menuStrings[menuLoopState & STATEMASK]);
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	e8 54       	subi	r30, 0x48	; 72
     716:	fe 4f       	sbci	r31, 0xFE	; 254
// {{{ void showMenuItem()

void showMenuItem()
{
    // top line
    switch (menuLoopState)
     718:	03 97       	sbiw	r24, 0x03	; 3
     71a:	d0 f4       	brcc	.+52     	; 0x750 <showMenuItem+0x52>
        case MSCAN :
        case MSETTINGS :
#ifdef DBG_LOGGING
            fprintf(dbg,"point 1\n");
#endif
            sprintf(Line,"> %-*s",DISPLAY_WIDTH-2, menuStrings[menuLoopState & STATEMASK]);
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	8f 93       	push	r24
     720:	80 81       	ld	r24, Z
     722:	8f 93       	push	r24
     724:	1f 92       	push	r1
     726:	8e e0       	ldi	r24, 0x0E	; 14
     728:	8f 93       	push	r24
     72a:	85 e4       	ldi	r24, 0x45	; 69
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	81 e2       	ldi	r24, 0x21	; 33
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	9f 93       	push	r25
     738:	8f 93       	push	r24
     73a:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
#ifdef DBG_LOGGING
            fprintf(dbg,"point 2\n");
#endif
            break;
     73e:	8d b7       	in	r24, 0x3d	; 61
     740:	9e b7       	in	r25, 0x3e	; 62
     742:	08 96       	adiw	r24, 0x08	; 8
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	9e bf       	out	0x3e, r25	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	8d bf       	out	0x3d, r24	; 61
     74e:	19 c0       	rjmp	.+50     	; 0x782 <showMenuItem+0x84>

        default : 
#ifdef DBG_LOGGING
            fprintf(dbg,"point 3\n");
#endif
            sprintf(Line,"> Set %-*s",DISPLAY_WIDTH-6, menuStrings[menuLoopState & STATEMASK]);
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	8f 93       	push	r24
     754:	80 81       	ld	r24, Z
     756:	8f 93       	push	r24
     758:	1f 92       	push	r1
     75a:	8a e0       	ldi	r24, 0x0A	; 10
     75c:	8f 93       	push	r24
     75e:	8c e4       	ldi	r24, 0x4C	; 76
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	81 e2       	ldi	r24, 0x21	; 33
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
     772:	8d b7       	in	r24, 0x3d	; 61
     774:	9e b7       	in	r25, 0x3e	; 62
     776:	08 96       	adiw	r24, 0x08	; 8
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	9e bf       	out	0x3e, r25	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	8d bf       	out	0x3d, r24	; 61
#ifdef DBG_LOGGING
            fprintf(dbg,"point 4\n");
#endif
    }
    setDisplay(0, Line);
     782:	61 e2       	ldi	r22, 0x21	; 33
     784:	73 e0       	ldi	r23, 0x03	; 3
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 b6 01 	call	0x36c	; 0x36c <setDisplay>

    // bottom line
#ifdef DBG_LOGGING
    fprintf(dbg,"point 5\n");
#endif
    bottomLinePrinter(menuLoopState,"  "); 
     78e:	67 e5       	ldi	r22, 0x57	; 87
     790:	72 e0       	ldi	r23, 0x02	; 2
     792:	80 91 44 03 	lds	r24, 0x0344
     796:	90 91 45 03 	lds	r25, 0x0345
     79a:	0c 94 88 02 	jmp	0x510	; 0x510 <bottomLinePrinter>

0000079e <showMenuItemValue>:
// {{{ void showMenuItemValue()

void showMenuItemValue()
{
    // top line
    sprintf(Line,"  Set %-*s", DISPLAY_WIDTH-6, menuStrings[menuLoopState & STATEMASK]);
     79e:	e0 91 44 03 	lds	r30, 0x0344
     7a2:	f0 91 45 03 	lds	r31, 0x0345
     7a6:	ef 72       	andi	r30, 0x2F	; 47
     7a8:	ff 27       	eor	r31, r31
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e8 54       	subi	r30, 0x48	; 72
     7b0:	fe 4f       	sbci	r31, 0xFE	; 254
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
     7b4:	8f 93       	push	r24
     7b6:	80 81       	ld	r24, Z
     7b8:	8f 93       	push	r24
     7ba:	1f 92       	push	r1
     7bc:	8a e0       	ldi	r24, 0x0A	; 10
     7be:	8f 93       	push	r24
     7c0:	8a e5       	ldi	r24, 0x5A	; 90
     7c2:	92 e0       	ldi	r25, 0x02	; 2
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	81 e2       	ldi	r24, 0x21	; 33
     7ca:	93 e0       	ldi	r25, 0x03	; 3
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
    setDisplay(0, Line);
     7d4:	61 e2       	ldi	r22, 0x21	; 33
     7d6:	73 e0       	ldi	r23, 0x03	; 3
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 b6 01 	call	0x36c	; 0x36c <setDisplay>

    // bottom line
    bottomLinePrinter(menuLoopState,"> "); 
     7e0:	8d b7       	in	r24, 0x3d	; 61
     7e2:	9e b7       	in	r25, 0x3e	; 62
     7e4:	08 96       	adiw	r24, 0x08	; 8
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	9e bf       	out	0x3e, r25	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	8d bf       	out	0x3d, r24	; 61
     7f0:	65 e6       	ldi	r22, 0x65	; 101
     7f2:	72 e0       	ldi	r23, 0x02	; 2
     7f4:	80 91 44 03 	lds	r24, 0x0344
     7f8:	90 91 45 03 	lds	r25, 0x0345
     7fc:	0c 94 88 02 	jmp	0x510	; 0x510 <bottomLinePrinter>

00000800 <showSubmenu1Item>:
// {{{ void showSubmenu1Item(void)

void showSubmenu1Item(void)
{
    // top line
    switch (menuLoopState)
     800:	e0 91 44 03 	lds	r30, 0x0344
     804:	f0 91 45 03 	lds	r31, 0x0345
     808:	cf 01       	movw	r24, r30
     80a:	80 5c       	subi	r24, 0xC0	; 192
     80c:	91 09       	sbc	r25, r1
     80e:	02 97       	sbiw	r24, 0x02	; 2
     810:	f8 f4       	brcc	.+62     	; 0x850 <showSubmenu1Item+0x50>
    {
        case MARETURNMODE :
        case MAREFFREQ    :
            sprintf(Line,"> %-*s",DISPLAY_WIDTH-2, subMenuStrings1[menuLoopState & STATEMASK]);
     812:	ef 72       	andi	r30, 0x2F	; 47
     814:	ff 27       	eor	r31, r31
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ec 56       	subi	r30, 0x6C	; 108
     81c:	fe 4f       	sbci	r31, 0xFE	; 254
     81e:	81 81       	ldd	r24, Z+1	; 0x01
     820:	8f 93       	push	r24
     822:	80 81       	ld	r24, Z
     824:	8f 93       	push	r24
     826:	1f 92       	push	r1
     828:	8e e0       	ldi	r24, 0x0E	; 14
     82a:	8f 93       	push	r24
     82c:	85 e4       	ldi	r24, 0x45	; 69
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	9f 93       	push	r25
     832:	8f 93       	push	r24
     834:	81 e2       	ldi	r24, 0x21	; 33
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
            break;
     840:	8d b7       	in	r24, 0x3d	; 61
     842:	9e b7       	in	r25, 0x3e	; 62
     844:	08 96       	adiw	r24, 0x08	; 8
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	9e bf       	out	0x3e, r25	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	8d bf       	out	0x3d, r24	; 61
    }
    setDisplay(0, Line);
     850:	61 e2       	ldi	r22, 0x21	; 33
     852:	73 e0       	ldi	r23, 0x03	; 3
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 b6 01 	call	0x36c	; 0x36c <setDisplay>

    // bottom line
    bottomLinePrinter(menuLoopState,"  "); 
     85c:	67 e5       	ldi	r22, 0x57	; 87
     85e:	72 e0       	ldi	r23, 0x02	; 2
     860:	80 91 44 03 	lds	r24, 0x0344
     864:	90 91 45 03 	lds	r25, 0x0345
     868:	0c 94 88 02 	jmp	0x510	; 0x510 <bottomLinePrinter>

0000086c <showSubmenu1ItemValue>:
// {{{ void showSubmenuItemValue()

void showSubmenu1ItemValue()
{
    // top line
    sprintf(Line,"  %-*s", DISPLAY_WIDTH-2, subMenuStrings1[menuLoopState & STATEMASK]);
     86c:	e0 91 44 03 	lds	r30, 0x0344
     870:	f0 91 45 03 	lds	r31, 0x0345
     874:	ef 72       	andi	r30, 0x2F	; 47
     876:	ff 27       	eor	r31, r31
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	ec 56       	subi	r30, 0x6C	; 108
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	81 81       	ldd	r24, Z+1	; 0x01
     882:	8f 93       	push	r24
     884:	80 81       	ld	r24, Z
     886:	8f 93       	push	r24
     888:	1f 92       	push	r1
     88a:	8e e0       	ldi	r24, 0x0E	; 14
     88c:	8f 93       	push	r24
     88e:	88 e6       	ldi	r24, 0x68	; 104
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	9f 93       	push	r25
     894:	8f 93       	push	r24
     896:	81 e2       	ldi	r24, 0x21	; 33
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	9f 93       	push	r25
     89c:	8f 93       	push	r24
     89e:	0e 94 a1 06 	call	0xd42	; 0xd42 <sprintf>
    setDisplay(0, Line);
     8a2:	61 e2       	ldi	r22, 0x21	; 33
     8a4:	73 e0       	ldi	r23, 0x03	; 3
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 b6 01 	call	0x36c	; 0x36c <setDisplay>

    // bottom line
    bottomLinePrinter(menuLoopState,"> "); 
     8ae:	8d b7       	in	r24, 0x3d	; 61
     8b0:	9e b7       	in	r25, 0x3e	; 62
     8b2:	08 96       	adiw	r24, 0x08	; 8
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	9e bf       	out	0x3e, r25	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	8d bf       	out	0x3d, r24	; 61
     8be:	65 e6       	ldi	r22, 0x65	; 101
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	80 91 44 03 	lds	r24, 0x0344
     8c6:	90 91 45 03 	lds	r25, 0x0345
     8ca:	0c 94 88 02 	jmp	0x510	; 0x510 <bottomLinePrinter>

000008ce <setPLL>:
// {{{ PLL

// {{{ void setPLL(long r)

void setPLL(long r)
{
     8ce:	28 e1       	ldi	r18, 0x18	; 24
     8d0:	30 e0       	ldi	r19, 0x00	; 0

#else
    short i;

    for (i=0; i<24; i++) {
        if (r & 0x800000)
     8d2:	87 ff       	sbrs	r24, 7
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <setPLL+0xc>
            sbi(PORTC, ADATA);
     8d6:	41 9a       	sbi	0x08, 1	; 8
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <setPLL+0xe>
        else
            cbi(PORTC, ADATA);
     8da:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8dc:	42 e0       	ldi	r20, 0x02	; 2
     8de:	4a 95       	dec	r20
     8e0:	f1 f7       	brne	.-4      	; 0x8de <setPLL+0x10>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <setPLL+0x16>
        _delay_us(1);
        sbi(PORTC, ACLK);
     8e4:	40 9a       	sbi	0x08, 0	; 8
     8e6:	42 e0       	ldi	r20, 0x02	; 2
     8e8:	4a 95       	dec	r20
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <setPLL+0x1a>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <setPLL+0x20>
        _delay_us(1);
        cbi(PORTC, ACLK);
     8ee:	40 98       	cbi	0x08, 0	; 8
        r <<= 1;
     8f0:	66 0f       	add	r22, r22
     8f2:	77 1f       	adc	r23, r23
     8f4:	88 1f       	adc	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	31 09       	sbc	r19, r1
    // $$$FHE do nothing for now

#else
    short i;

    for (i=0; i<24; i++) {
     8fc:	21 15       	cp	r18, r1
     8fe:	31 05       	cpc	r19, r1
     900:	41 f7       	brne	.-48     	; 0x8d2 <setPLL+0x4>
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	8a 95       	dec	r24
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
     908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xb>
        _delay_us(1);
        cbi(PORTC, ACLK);
        r <<= 1;
    }
    _delay_us(1);
    sbi(PORTC, ALE);
     90a:	42 9a       	sbi	0x08, 2	; 8
     90c:	42 e0       	ldi	r20, 0x02	; 2
     90e:	4a 95       	dec	r20
     910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xf>
     912:	00 c0       	rjmp	.+0      	; 0x914 <__stack+0x15>
    _delay_us(1);
    cbi(PORTC, ALE);
     914:	42 98       	cbi	0x08, 2	; 8
     916:	08 95       	ret

00000918 <setFreq>:

// }}}
// {{{ void setFreq(long f)

void setFreq(long f)
{
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
    long reg, frast, A, B;

    f = (SS_Transmitting) ? f : f-IF;
     924:	20 91 0b 03 	lds	r18, 0x030B
     928:	21 11       	cpse	r18, r1
     92a:	04 c0       	rjmp	.+8      	; 0x934 <setFreq+0x1c>
     92c:	64 5b       	subi	r22, 0xB4	; 180
     92e:	7e 40       	sbci	r23, 0x0E	; 14
     930:	81 40       	sbci	r24, 0x01	; 1
     932:	91 09       	sbc	r25, r1
    frast = f/CHANNELSTEP;
     934:	29 e1       	ldi	r18, 0x19	; 25
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
    B = frast/16;
     940:	ca 01       	movw	r24, r20
     942:	b9 01       	movw	r22, r18
     944:	20 e1       	ldi	r18, 0x10	; 16
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
    A = frast%16;

    reg = ((B & 0x1fff)<<8) + ((A & 0x3f)<<2) + 1;
     954:	da 01       	movw	r26, r20
     956:	c9 01       	movw	r24, r18
     958:	9f 71       	andi	r25, 0x1F	; 31
     95a:	aa 27       	eor	r26, r26
     95c:	bb 27       	eor	r27, r27
     95e:	66 27       	eor	r22, r22
     960:	78 2f       	mov	r23, r24
     962:	89 2f       	mov	r24, r25
     964:	9a 2f       	mov	r25, r26
     966:	97 01       	movw	r18, r14
     968:	86 01       	movw	r16, r12
     96a:	a2 e0       	ldi	r26, 0x02	; 2
     96c:	00 0f       	add	r16, r16
     96e:	11 1f       	adc	r17, r17
     970:	22 1f       	adc	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	aa 95       	dec	r26
     976:	d1 f7       	brne	.-12     	; 0x96c <setFreq+0x54>
     978:	11 27       	eor	r17, r17
     97a:	22 27       	eor	r18, r18
     97c:	33 27       	eor	r19, r19
     97e:	60 0f       	add	r22, r16
     980:	71 1f       	adc	r23, r17
     982:	82 1f       	adc	r24, r18
     984:	93 1f       	adc	r25, r19
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	8f 4f       	sbci	r24, 0xFF	; 255
     98c:	9f 4f       	sbci	r25, 0xFF	; 255

    setPLL(reg);
}
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
    B = frast/16;
    A = frast%16;

    reg = ((B & 0x1fff)<<8) + ((A & 0x3f)<<2) + 1;

    setPLL(reg);
     99a:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <setPLL>

0000099e <initPLL>:
{
#ifdef TESTING
    // $$$FHE Do nothing for now
#else
    long reg;
    SS_PllReferenceFrequency = 13000UL;
     99e:	88 ec       	ldi	r24, 0xC8	; 200
     9a0:	92 e3       	ldi	r25, 0x32	; 50
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	80 93 02 03 	sts	0x0302, r24
     9aa:	90 93 03 03 	sts	0x0303, r25
     9ae:	a0 93 04 03 	sts	0x0304, r26
     9b2:	b0 93 05 03 	sts	0x0305, r27

    cbi(PORTC, ADATA);
     9b6:	41 98       	cbi	0x08, 1	; 8
    cbi(PORTC, ACLK);
     9b8:	40 98       	cbi	0x08, 0	; 8
    cbi(PORTC, ALE);
     9ba:	42 98       	cbi	0x08, 2	; 8

    // set function latch
    reg = 0x438086;
    setPLL(reg);
     9bc:	66 e8       	ldi	r22, 0x86	; 134
     9be:	70 e8       	ldi	r23, 0x80	; 128
     9c0:	83 e4       	ldi	r24, 0x43	; 67
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 67 04 	call	0x8ce	; 0x8ce <setPLL>

    // init R-counter
    reg = (2UL<<16) + ((SS_PllReferenceFrequency/CHANNELSTEP)<<2);
     9c8:	60 91 02 03 	lds	r22, 0x0302
     9cc:	70 91 03 03 	lds	r23, 0x0303
     9d0:	80 91 04 03 	lds	r24, 0x0304
     9d4:	90 91 05 03 	lds	r25, 0x0305
     9d8:	29 e1       	ldi	r18, 0x19	; 25
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divmodsi4>
     9e4:	b2 e0       	ldi	r27, 0x02	; 2
     9e6:	22 0f       	add	r18, r18
     9e8:	33 1f       	adc	r19, r19
     9ea:	44 1f       	adc	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	ba 95       	dec	r27
     9f0:	d1 f7       	brne	.-12     	; 0x9e6 <initPLL+0x48>
     9f2:	4e 5f       	subi	r20, 0xFE	; 254
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
    setPLL(reg);
     9f6:	ca 01       	movw	r24, r20
     9f8:	b9 01       	movw	r22, r18
     9fa:	0e 94 67 04 	call	0x8ce	; 0x8ce <setPLL>

    setFreq(SS_VfoFrequency);
     9fe:	60 91 cc 02 	lds	r22, 0x02CC
     a02:	70 91 cd 02 	lds	r23, 0x02CD
     a06:	80 91 ce 02 	lds	r24, 0x02CE
     a0a:	90 91 cf 02 	lds	r25, 0x02CF
     a0e:	0e 94 8c 04 	call	0x918	; 0x918 <setFreq>

    reg = 0x438082;
    setPLL(reg);
     a12:	62 e8       	ldi	r22, 0x82	; 130
     a14:	70 e8       	ldi	r23, 0x80	; 128
     a16:	83 e4       	ldi	r24, 0x43	; 67
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <setPLL>

00000a1e <initialize>:
// }}}
// {{{ void initialize(void)

void initialize(void)
{
    SS_BaseFrequency        = INITIAL_FREQUENCY;
     a1e:	88 e1       	ldi	r24, 0x18	; 24
     a20:	9f ec       	ldi	r25, 0xCF	; 207
     a22:	a3 e1       	ldi	r26, 0x13	; 19
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	80 93 10 03 	sts	0x0310, r24
     a2a:	90 93 11 03 	sts	0x0311, r25
     a2e:	a0 93 12 03 	sts	0x0312, r26
     a32:	b0 93 13 03 	sts	0x0313, r27
    SS_FrequencyShift       = INITIAL_SHIFT;
     a36:	44 ee       	ldi	r20, 0xE4	; 228
     a38:	5f ef       	ldi	r21, 0xFF	; 255
     a3a:	6f ef       	ldi	r22, 0xFF	; 255
     a3c:	7f ef       	ldi	r23, 0xFF	; 255
     a3e:	40 93 18 03 	sts	0x0318, r20
     a42:	50 93 19 03 	sts	0x0319, r21
     a46:	60 93 1a 03 	sts	0x031A, r22
     a4a:	70 93 1b 03 	sts	0x031B, r23
    SS_ScanStartFrequency   = INITIAL_FREQUENCY;
     a4e:	80 93 c6 02 	sts	0x02C6, r24
     a52:	90 93 c7 02 	sts	0x02C7, r25
     a56:	a0 93 c8 02 	sts	0x02C8, r26
     a5a:	b0 93 c9 02 	sts	0x02C9, r27
    SS_ScanEndFrequency     = BANDTOP;
     a5e:	80 e2       	ldi	r24, 0x20	; 32
     a60:	96 ed       	ldi	r25, 0xD6	; 214
     a62:	a3 e1       	ldi	r26, 0x13	; 19
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	80 93 14 03 	sts	0x0314, r24
     a6a:	90 93 15 03 	sts	0x0315, r25
     a6e:	a0 93 16 03 	sts	0x0316, r26
     a72:	b0 93 17 03 	sts	0x0317, r27
    SS_MuteLevel            = INITIAL_MUTELEVEL;
     a76:	85 e0       	ldi	r24, 0x05	; 5
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 09 03 	sts	0x0309, r25
     a7e:	80 93 08 03 	sts	0x0308, r24
    SS_ShiftEnable          = FALSE;
     a82:	10 92 4e 03 	sts	0x034E, r1
    SS_ReverseShift         = FALSE;
     a86:	10 92 4b 03 	sts	0x034B, r1
    SS_Transmitting         = FALSE;
     a8a:	10 92 0b 03 	sts	0x030B, r1
#ifdef TESTING
    vInRotState = 9;
    GetcAvail   = FALSE;
    GetcBuffer  = 0;
#else
    initPORTS();
     a8e:	0e 94 ab 00 	call	0x156	; 0x156 <initPORTS>
    initPLL();
     a92:	0e 94 cf 04 	call	0x99e	; 0x99e <initPLL>
    initLCD();
     a96:	0e 94 1d 01 	call	0x23a	; 0x23a <initLCD>
    initADC();
    initIRQ(); 
     a9a:	0c 94 91 00 	jmp	0x122	; 0x122 <initIRQ>

00000a9e <showItem>:
// {{{ obsolete
// {{{ void showItem(void)

void showItem(void)
{
    switch (menuLoopState & TYPEMASK)
     a9e:	80 91 44 03 	lds	r24, 0x0344
     aa2:	90 91 45 03 	lds	r25, 0x0345
     aa6:	80 7c       	andi	r24, 0xC0	; 192
     aa8:	80 38       	cpi	r24, 0x80	; 128
     aaa:	91 05       	cpc	r25, r1
     aac:	71 f0       	breq	.+28     	; 0xaca <showItem+0x2c>
     aae:	20 f4       	brcc	.+8      	; 0xab8 <showItem+0x1a>
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	91 05       	cpc	r25, r1
     ab4:	41 f0       	breq	.+16     	; 0xac6 <showItem+0x28>
     ab6:	08 95       	ret
     ab8:	80 3c       	cpi	r24, 0xC0	; 192
     aba:	91 05       	cpc	r25, r1
     abc:	41 f0       	breq	.+16     	; 0xace <showItem+0x30>
     abe:	81 15       	cp	r24, r1
     ac0:	91 40       	sbci	r25, 0x01	; 1
     ac2:	39 f0       	breq	.+14     	; 0xad2 <showItem+0x34>
     ac4:	08 95       	ret
    {
        case MAINMENU :
            showMenuItem();
     ac6:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <showMenuItem>
            break;
        case MAINMENU_VAL:
            showMenuItemValue();
     aca:	0c 94 cf 03 	jmp	0x79e	; 0x79e <showMenuItemValue>
            break;
        case SUBMENU1 :
            showSubmenu1Item();
     ace:	0c 94 00 04 	jmp	0x800	; 0x800 <showSubmenu1Item>
            break;
        case SUBMENU1_VAL:
            showSubmenu1ItemValue();
     ad2:	0c 94 36 04 	jmp	0x86c	; 0x86c <showSubmenu1ItemValue>

00000ad6 <getMaxMenuIndex>:
// {{{ short getMaxMenuIndex(void)

short getMaxMenuIndex(void)
{
    short max;
    switch (menuLoopState & TYPEMASK)
     ad6:	80 91 44 03 	lds	r24, 0x0344
     ada:	90 91 45 03 	lds	r25, 0x0345
     ade:	80 7c       	andi	r24, 0xC0	; 192
     ae0:	80 38       	cpi	r24, 0x80	; 128
     ae2:	91 05       	cpc	r25, r1
     ae4:	b1 f0       	breq	.+44     	; 0xb12 <getMaxMenuIndex+0x3c>
     ae6:	30 f4       	brcc	.+12     	; 0xaf4 <getMaxMenuIndex+0x1e>
     ae8:	80 34       	cpi	r24, 0x40	; 64
     aea:	91 05       	cpc	r25, r1
     aec:	79 f4       	brne	.+30     	; 0xb0c <getMaxMenuIndex+0x36>
    {
        case MAINMENU : 
            max = MAINMENU_END;
     aee:	87 e4       	ldi	r24, 0x47	; 71
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	08 95       	ret
// {{{ short getMaxMenuIndex(void)

short getMaxMenuIndex(void)
{
    short max;
    switch (menuLoopState & TYPEMASK)
     af4:	80 3c       	cpi	r24, 0xC0	; 192
     af6:	91 05       	cpc	r25, r1
     af8:	31 f0       	breq	.+12     	; 0xb06 <getMaxMenuIndex+0x30>
     afa:	81 15       	cp	r24, r1
     afc:	91 40       	sbci	r25, 0x01	; 1
     afe:	31 f4       	brne	.+12     	; 0xb0c <getMaxMenuIndex+0x36>
            break;
        case SUBMENU1 : 
            max = SUBMENU1_END;
            break;
        case SUBMENU1_VAL : 
            max = SUBMENU1_VAL_END;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	91 e0       	ldi	r25, 0x01	; 1
            break;
     b04:	08 95       	ret
            break;
        case MAINMENU_VAL : 
            max = MAINMENU_VAL_END;
            break;
        case SUBMENU1 : 
            max = SUBMENU1_END;
     b06:	81 ec       	ldi	r24, 0xC1	; 193
     b08:	90 e0       	ldi	r25, 0x00	; 0
            break;
     b0a:	08 95       	ret
            max = SUBMENU1_VAL_END;
            break;

            // this value should never occur
        default :
            max = 666;
     b0c:	8a e9       	ldi	r24, 0x9A	; 154
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	08 95       	ret
    {
        case MAINMENU : 
            max = MAINMENU_END;
            break;
        case MAINMENU_VAL : 
            max = MAINMENU_VAL_END;
     b12:	84 e8       	ldi	r24, 0x84	; 132
     b14:	90 e0       	ldi	r25, 0x00	; 0
            // this value should never occur
        default :
            max = 666;
    }
    return max;
}
     b16:	08 95       	ret

00000b18 <mainLoop>:
        // {{{ // Tuning
        if (!SS_Transmitting)
        {
            if (SS_RotaryCount != 0)
            {
                SS_BaseFrequency  += SS_RotaryCount * CHANNELSTEP;
     b18:	09 e1       	ldi	r16, 0x19	; 25
     b1a:	f0 2e       	mov	r15, r16
        SS_TxRxIndicator = (SS_Transmitting) ? 'T' : 'R';

        // }}}
        // {{{ // Squelch

        SS_DisplaySMeter = (1024-SS_SMeterIn) - 44;
     b1c:	c4 ed       	ldi	r28, 0xD4	; 212
     b1e:	d3 e0       	ldi	r29, 0x03	; 3
    char busy = TRUE;
    while (busy)
    {
        // {{{ Input handling

        SS_RotaryCount = InputGetRotaryDialCount();
     b20:	0e 94 b4 00 	call	0x168	; 0x168 <InputGetRotaryDialCount>
     b24:	90 93 4a 03 	sts	0x034A, r25
     b28:	80 93 49 03 	sts	0x0349, r24
        SS_Selected    = InputGetSelectorPushed();
     b2c:	0e 94 bf 00 	call	0x17e	; 0x17e <InputGetSelectorPushed>
     b30:	80 93 0a 03 	sts	0x030A, r24
        SS_ShiftEnable = InputGetShiftEnable();
     b34:	0e 94 c4 00 	call	0x188	; 0x188 <InputGetShiftEnable>
     b38:	80 93 4e 03 	sts	0x034E, r24
        SS_PTT         = InputGetPTT();
     b3c:	0e 94 c8 00 	call	0x190	; 0x190 <InputGetPTT>
     b40:	80 93 07 03 	sts	0x0307, r24
        SS_SMeterIn    = InputGetSMeter();
     b44:	0e 94 cb 00 	call	0x196	; 0x196 <InputGetSMeter>
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	90 93 41 03 	sts	0x0341, r25
     b4e:	80 93 40 03 	sts	0x0340, r24
        // {{{ Remote Control will take place here
        // }}}
        // {{{ Processing

        // {{{ // Tuning
        if (!SS_Transmitting)
     b52:	20 91 0b 03 	lds	r18, 0x030B
     b56:	21 11       	cpse	r18, r1
     b58:	3a c0       	rjmp	.+116    	; 0xbce <mainLoop+0xb6>
        {
            if (SS_RotaryCount != 0)
     b5a:	20 91 49 03 	lds	r18, 0x0349
     b5e:	30 91 4a 03 	lds	r19, 0x034A
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	99 f1       	breq	.+102    	; 0xbce <mainLoop+0xb6>
            {
                SS_BaseFrequency  += SS_RotaryCount * CHANNELSTEP;
     b68:	f2 9e       	mul	r15, r18
     b6a:	a0 01       	movw	r20, r0
     b6c:	f3 9e       	mul	r15, r19
     b6e:	50 0d       	add	r21, r0
     b70:	11 24       	eor	r1, r1
     b72:	66 27       	eor	r22, r22
     b74:	57 fd       	sbrc	r21, 7
     b76:	60 95       	com	r22
     b78:	76 2f       	mov	r23, r22
     b7a:	00 91 10 03 	lds	r16, 0x0310
     b7e:	10 91 11 03 	lds	r17, 0x0311
     b82:	20 91 12 03 	lds	r18, 0x0312
     b86:	30 91 13 03 	lds	r19, 0x0313
     b8a:	40 0f       	add	r20, r16
     b8c:	51 1f       	adc	r21, r17
     b8e:	62 1f       	adc	r22, r18
     b90:	73 1f       	adc	r23, r19
     b92:	40 93 10 03 	sts	0x0310, r20
     b96:	50 93 11 03 	sts	0x0311, r21
     b9a:	60 93 12 03 	sts	0x0312, r22
     b9e:	70 93 13 03 	sts	0x0313, r23
                SS_VfoFrequency = SS_BaseFrequency - IF;
     ba2:	8a 01       	movw	r16, r20
     ba4:	9b 01       	movw	r18, r22
     ba6:	04 5b       	subi	r16, 0xB4	; 180
     ba8:	1e 40       	sbci	r17, 0x0E	; 14
     baa:	21 40       	sbci	r18, 0x01	; 1
     bac:	31 09       	sbc	r19, r1
     bae:	00 93 cc 02 	sts	0x02CC, r16
     bb2:	10 93 cd 02 	sts	0x02CD, r17
     bb6:	20 93 ce 02 	sts	0x02CE, r18
     bba:	30 93 cf 02 	sts	0x02CF, r19
                SS_DisplayFrequency = SS_BaseFrequency;
     bbe:	40 93 3b 03 	sts	0x033B, r20
     bc2:	50 93 3c 03 	sts	0x033C, r21
     bc6:	60 93 3d 03 	sts	0x033D, r22
     bca:	70 93 3e 03 	sts	0x033E, r23
        }

        // }}}
        // {{{ // Push To Talk

        SS_Transmitting = SS_PTT;
     bce:	20 91 07 03 	lds	r18, 0x0307
     bd2:	20 93 0b 03 	sts	0x030B, r18
        SS_TxRxIndicator = (SS_Transmitting) ? 'T' : 'R';
     bd6:	22 23       	and	r18, r18
     bd8:	11 f0       	breq	.+4      	; 0xbde <mainLoop+0xc6>
     bda:	24 e5       	ldi	r18, 0x54	; 84
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <mainLoop+0xc8>
     bde:	22 e5       	ldi	r18, 0x52	; 82
     be0:	20 93 fc 02 	sts	0x02FC, r18

        // }}}
        // {{{ // Squelch

        SS_DisplaySMeter = (1024-SS_SMeterIn) - 44;
     be4:	9e 01       	movw	r18, r28
     be6:	28 1b       	sub	r18, r24
     be8:	39 0b       	sbc	r19, r25
     bea:	c9 01       	movw	r24, r18

        // low pass s-meter signal
        SS_DisplaySMeter += LowPass;
     bec:	20 91 0c 03 	lds	r18, 0x030C
     bf0:	30 91 0d 03 	lds	r19, 0x030D
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
        SS_DisplaySMeter >>= 1;
     bf8:	95 95       	asr	r25
     bfa:	87 95       	ror	r24
     bfc:	90 93 20 03 	sts	0x0320, r25
     c00:	80 93 1f 03 	sts	0x031F, r24
        LowPass= SS_DisplaySMeter;
     c04:	90 93 0d 03 	sts	0x030D, r25
     c08:	80 93 0c 03 	sts	0x030C, r24

        SS_Muted = (SS_MuteLevel > SS_DisplaySMeter);
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	20 91 08 03 	lds	r18, 0x0308
     c12:	30 91 09 03 	lds	r19, 0x0309
     c16:	82 17       	cp	r24, r18
     c18:	93 07       	cpc	r25, r19
     c1a:	0c f0       	brlt	.+2      	; 0xc1e <mainLoop+0x106>
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	40 93 06 03 	sts	0x0306, r20
        SS_MuteIndicator = (SS_Muted) ? 'M' : ' ';
     c22:	44 23       	and	r20, r20
     c24:	11 f0       	breq	.+4      	; 0xc2a <mainLoop+0x112>
     c26:	8d e4       	ldi	r24, 0x4D	; 77
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <mainLoop+0x114>
     c2a:	80 e2       	ldi	r24, 0x20	; 32
     c2c:	80 93 fe 02 	sts	0x02FE, r24
        OutputSetCtcssFreq(SS_CtcssFrequency);
        OutputSetAudioMute(SS_Muted);
        OutputSetDisplaySMeter(SS_DisplaySMeter);
        OutputSetDisplayMuteIndicator(SS_MuteIndicator);
        OutputSetDisplayTxRxIndicator(SS_TxRxIndicator);
        OutputSetDisplayFrequency(SS_DisplayFrequency);
     c30:	60 91 3b 03 	lds	r22, 0x033B
     c34:	70 91 3c 03 	lds	r23, 0x033C
     c38:	80 91 3d 03 	lds	r24, 0x033D
     c3c:	90 91 3e 03 	lds	r25, 0x033E
     c40:	0e 94 10 02 	call	0x420	; 0x420 <OutputSetDisplayFrequency>
            deSetCursorPosition(DBGROW,1);
            printf("2");
        }
#endif
        // }}}
        updateDisplay();
     c44:	0e 94 a1 01 	call	0x342	; 0x342 <updateDisplay>
     c48:	6b cf       	rjmp	.-298    	; 0xb20 <mainLoop+0x8>

00000c4a <main>:
#endif
#endif

    // }}}

    initialize();
     c4a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <initialize>
    mainLoop();
     c4e:	0e 94 8c 05 	call	0xb18	; 0xb18 <mainLoop>

00000c52 <__divmodhi4>:
     c52:	97 fb       	bst	r25, 7
     c54:	07 2e       	mov	r0, r23
     c56:	16 f4       	brtc	.+4      	; 0xc5c <__divmodhi4+0xa>
     c58:	00 94       	com	r0
     c5a:	07 d0       	rcall	.+14     	; 0xc6a <__divmodhi4_neg1>
     c5c:	77 fd       	sbrc	r23, 7
     c5e:	09 d0       	rcall	.+18     	; 0xc72 <__divmodhi4_neg2>
     c60:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__udivmodhi4>
     c64:	07 fc       	sbrc	r0, 7
     c66:	05 d0       	rcall	.+10     	; 0xc72 <__divmodhi4_neg2>
     c68:	3e f4       	brtc	.+14     	; 0xc78 <__divmodhi4_exit>

00000c6a <__divmodhi4_neg1>:
     c6a:	90 95       	com	r25
     c6c:	81 95       	neg	r24
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	08 95       	ret

00000c72 <__divmodhi4_neg2>:
     c72:	70 95       	com	r23
     c74:	61 95       	neg	r22
     c76:	7f 4f       	sbci	r23, 0xFF	; 255

00000c78 <__divmodhi4_exit>:
     c78:	08 95       	ret

00000c7a <__divmodsi4>:
     c7a:	05 2e       	mov	r0, r21
     c7c:	97 fb       	bst	r25, 7
     c7e:	1e f4       	brtc	.+6      	; 0xc86 <__divmodsi4+0xc>
     c80:	00 94       	com	r0
     c82:	0e 94 54 06 	call	0xca8	; 0xca8 <__negsi2>
     c86:	57 fd       	sbrc	r21, 7
     c88:	07 d0       	rcall	.+14     	; 0xc98 <__divmodsi4_neg2>
     c8a:	0e 94 70 06 	call	0xce0	; 0xce0 <__udivmodsi4>
     c8e:	07 fc       	sbrc	r0, 7
     c90:	03 d0       	rcall	.+6      	; 0xc98 <__divmodsi4_neg2>
     c92:	4e f4       	brtc	.+18     	; 0xca6 <__divmodsi4_exit>
     c94:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__negsi2>

00000c98 <__divmodsi4_neg2>:
     c98:	50 95       	com	r21
     c9a:	40 95       	com	r20
     c9c:	30 95       	com	r19
     c9e:	21 95       	neg	r18
     ca0:	3f 4f       	sbci	r19, 0xFF	; 255
     ca2:	4f 4f       	sbci	r20, 0xFF	; 255
     ca4:	5f 4f       	sbci	r21, 0xFF	; 255

00000ca6 <__divmodsi4_exit>:
     ca6:	08 95       	ret

00000ca8 <__negsi2>:
     ca8:	90 95       	com	r25
     caa:	80 95       	com	r24
     cac:	70 95       	com	r23
     cae:	61 95       	neg	r22
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	8f 4f       	sbci	r24, 0xFF	; 255
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	08 95       	ret

00000cb8 <__udivmodhi4>:
     cb8:	aa 1b       	sub	r26, r26
     cba:	bb 1b       	sub	r27, r27
     cbc:	51 e1       	ldi	r21, 0x11	; 17
     cbe:	07 c0       	rjmp	.+14     	; 0xcce <__udivmodhi4_ep>

00000cc0 <__udivmodhi4_loop>:
     cc0:	aa 1f       	adc	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	a6 17       	cp	r26, r22
     cc6:	b7 07       	cpc	r27, r23
     cc8:	10 f0       	brcs	.+4      	; 0xcce <__udivmodhi4_ep>
     cca:	a6 1b       	sub	r26, r22
     ccc:	b7 0b       	sbc	r27, r23

00000cce <__udivmodhi4_ep>:
     cce:	88 1f       	adc	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	5a 95       	dec	r21
     cd4:	a9 f7       	brne	.-22     	; 0xcc0 <__udivmodhi4_loop>
     cd6:	80 95       	com	r24
     cd8:	90 95       	com	r25
     cda:	bc 01       	movw	r22, r24
     cdc:	cd 01       	movw	r24, r26
     cde:	08 95       	ret

00000ce0 <__udivmodsi4>:
     ce0:	a1 e2       	ldi	r26, 0x21	; 33
     ce2:	1a 2e       	mov	r1, r26
     ce4:	aa 1b       	sub	r26, r26
     ce6:	bb 1b       	sub	r27, r27
     ce8:	fd 01       	movw	r30, r26
     cea:	0d c0       	rjmp	.+26     	; 0xd06 <__udivmodsi4_ep>

00000cec <__udivmodsi4_loop>:
     cec:	aa 1f       	adc	r26, r26
     cee:	bb 1f       	adc	r27, r27
     cf0:	ee 1f       	adc	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	a2 17       	cp	r26, r18
     cf6:	b3 07       	cpc	r27, r19
     cf8:	e4 07       	cpc	r30, r20
     cfa:	f5 07       	cpc	r31, r21
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__udivmodsi4_ep>
     cfe:	a2 1b       	sub	r26, r18
     d00:	b3 0b       	sbc	r27, r19
     d02:	e4 0b       	sbc	r30, r20
     d04:	f5 0b       	sbc	r31, r21

00000d06 <__udivmodsi4_ep>:
     d06:	66 1f       	adc	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	1a 94       	dec	r1
     d10:	69 f7       	brne	.-38     	; 0xcec <__udivmodsi4_loop>
     d12:	60 95       	com	r22
     d14:	70 95       	com	r23
     d16:	80 95       	com	r24
     d18:	90 95       	com	r25
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	bd 01       	movw	r22, r26
     d20:	cf 01       	movw	r24, r30
     d22:	08 95       	ret

00000d24 <strncpy>:
     d24:	fb 01       	movw	r30, r22
     d26:	dc 01       	movw	r26, r24
     d28:	41 50       	subi	r20, 0x01	; 1
     d2a:	50 40       	sbci	r21, 0x00	; 0
     d2c:	48 f0       	brcs	.+18     	; 0xd40 <strncpy+0x1c>
     d2e:	01 90       	ld	r0, Z+
     d30:	0d 92       	st	X+, r0
     d32:	00 20       	and	r0, r0
     d34:	c9 f7       	brne	.-14     	; 0xd28 <strncpy+0x4>
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <strncpy+0x16>
     d38:	1d 92       	st	X+, r1
     d3a:	41 50       	subi	r20, 0x01	; 1
     d3c:	50 40       	sbci	r21, 0x00	; 0
     d3e:	e0 f7       	brcc	.-8      	; 0xd38 <strncpy+0x14>
     d40:	08 95       	ret

00000d42 <sprintf>:
     d42:	ae e0       	ldi	r26, 0x0E	; 14
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 ea       	ldi	r30, 0xA7	; 167
     d48:	f6 e0       	ldi	r31, 0x06	; 6
     d4a:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__prologue_saves__+0x1c>
     d4e:	0d 89       	ldd	r16, Y+21	; 0x15
     d50:	1e 89       	ldd	r17, Y+22	; 0x16
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	8c 83       	std	Y+4, r24	; 0x04
     d56:	1a 83       	std	Y+2, r17	; 0x02
     d58:	09 83       	std	Y+1, r16	; 0x01
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	9f e7       	ldi	r25, 0x7F	; 127
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
     d62:	ae 01       	movw	r20, r28
     d64:	47 5e       	subi	r20, 0xE7	; 231
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	6f 89       	ldd	r22, Y+23	; 0x17
     d6a:	78 8d       	ldd	r23, Y+24	; 0x18
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	0e 94 c3 06 	call	0xd86	; 0xd86 <vfprintf>
     d74:	ef 81       	ldd	r30, Y+7	; 0x07
     d76:	f8 85       	ldd	r31, Y+8	; 0x08
     d78:	e0 0f       	add	r30, r16
     d7a:	f1 1f       	adc	r31, r17
     d7c:	10 82       	st	Z, r1
     d7e:	2e 96       	adiw	r28, 0x0e	; 14
     d80:	e4 e0       	ldi	r30, 0x04	; 4
     d82:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__epilogue_restores__+0x1c>

00000d86 <vfprintf>:
     d86:	ac e0       	ldi	r26, 0x0C	; 12
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e9 ec       	ldi	r30, 0xC9	; 201
     d8c:	f6 e0       	ldi	r31, 0x06	; 6
     d8e:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__prologue_saves__>
     d92:	7c 01       	movw	r14, r24
     d94:	6b 01       	movw	r12, r22
     d96:	8a 01       	movw	r16, r20
     d98:	fc 01       	movw	r30, r24
     d9a:	17 82       	std	Z+7, r1	; 0x07
     d9c:	16 82       	std	Z+6, r1	; 0x06
     d9e:	83 81       	ldd	r24, Z+3	; 0x03
     da0:	81 ff       	sbrs	r24, 1
     da2:	bd c1       	rjmp	.+890    	; 0x111e <vfprintf+0x398>
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	4c 01       	movw	r8, r24
     daa:	f7 01       	movw	r30, r14
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	f6 01       	movw	r30, r12
     db0:	93 fd       	sbrc	r25, 3
     db2:	85 91       	lpm	r24, Z+
     db4:	93 ff       	sbrs	r25, 3
     db6:	81 91       	ld	r24, Z+
     db8:	6f 01       	movw	r12, r30
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <vfprintf+0x3a>
     dbe:	ab c1       	rjmp	.+854    	; 0x1116 <vfprintf+0x390>
     dc0:	85 32       	cpi	r24, 0x25	; 37
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <vfprintf+0x4c>
     dc4:	93 fd       	sbrc	r25, 3
     dc6:	85 91       	lpm	r24, Z+
     dc8:	93 ff       	sbrs	r25, 3
     dca:	81 91       	ld	r24, Z+
     dcc:	6f 01       	movw	r12, r30
     dce:	85 32       	cpi	r24, 0x25	; 37
     dd0:	29 f4       	brne	.+10     	; 0xddc <vfprintf+0x56>
     dd2:	b7 01       	movw	r22, r14
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     dda:	e7 cf       	rjmp	.-50     	; 0xdaa <vfprintf+0x24>
     ddc:	51 2c       	mov	r5, r1
     dde:	31 2c       	mov	r3, r1
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	20 32       	cpi	r18, 0x20	; 32
     de4:	a0 f4       	brcc	.+40     	; 0xe0e <vfprintf+0x88>
     de6:	8b 32       	cpi	r24, 0x2B	; 43
     de8:	69 f0       	breq	.+26     	; 0xe04 <vfprintf+0x7e>
     dea:	30 f4       	brcc	.+12     	; 0xdf8 <vfprintf+0x72>
     dec:	80 32       	cpi	r24, 0x20	; 32
     dee:	59 f0       	breq	.+22     	; 0xe06 <vfprintf+0x80>
     df0:	83 32       	cpi	r24, 0x23	; 35
     df2:	69 f4       	brne	.+26     	; 0xe0e <vfprintf+0x88>
     df4:	20 61       	ori	r18, 0x10	; 16
     df6:	2c c0       	rjmp	.+88     	; 0xe50 <vfprintf+0xca>
     df8:	8d 32       	cpi	r24, 0x2D	; 45
     dfa:	39 f0       	breq	.+14     	; 0xe0a <vfprintf+0x84>
     dfc:	80 33       	cpi	r24, 0x30	; 48
     dfe:	39 f4       	brne	.+14     	; 0xe0e <vfprintf+0x88>
     e00:	21 60       	ori	r18, 0x01	; 1
     e02:	26 c0       	rjmp	.+76     	; 0xe50 <vfprintf+0xca>
     e04:	22 60       	ori	r18, 0x02	; 2
     e06:	24 60       	ori	r18, 0x04	; 4
     e08:	23 c0       	rjmp	.+70     	; 0xe50 <vfprintf+0xca>
     e0a:	28 60       	ori	r18, 0x08	; 8
     e0c:	21 c0       	rjmp	.+66     	; 0xe50 <vfprintf+0xca>
     e0e:	27 fd       	sbrc	r18, 7
     e10:	27 c0       	rjmp	.+78     	; 0xe60 <vfprintf+0xda>
     e12:	30 ed       	ldi	r19, 0xD0	; 208
     e14:	38 0f       	add	r19, r24
     e16:	3a 30       	cpi	r19, 0x0A	; 10
     e18:	78 f4       	brcc	.+30     	; 0xe38 <vfprintf+0xb2>
     e1a:	26 ff       	sbrs	r18, 6
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0xa4>
     e1e:	fa e0       	ldi	r31, 0x0A	; 10
     e20:	5f 9e       	mul	r5, r31
     e22:	30 0d       	add	r19, r0
     e24:	11 24       	eor	r1, r1
     e26:	53 2e       	mov	r5, r19
     e28:	13 c0       	rjmp	.+38     	; 0xe50 <vfprintf+0xca>
     e2a:	8a e0       	ldi	r24, 0x0A	; 10
     e2c:	38 9e       	mul	r3, r24
     e2e:	30 0d       	add	r19, r0
     e30:	11 24       	eor	r1, r1
     e32:	33 2e       	mov	r3, r19
     e34:	20 62       	ori	r18, 0x20	; 32
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <vfprintf+0xca>
     e38:	8e 32       	cpi	r24, 0x2E	; 46
     e3a:	21 f4       	brne	.+8      	; 0xe44 <vfprintf+0xbe>
     e3c:	26 fd       	sbrc	r18, 6
     e3e:	6b c1       	rjmp	.+726    	; 0x1116 <vfprintf+0x390>
     e40:	20 64       	ori	r18, 0x40	; 64
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <vfprintf+0xca>
     e44:	8c 36       	cpi	r24, 0x6C	; 108
     e46:	11 f4       	brne	.+4      	; 0xe4c <vfprintf+0xc6>
     e48:	20 68       	ori	r18, 0x80	; 128
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0xca>
     e4c:	88 36       	cpi	r24, 0x68	; 104
     e4e:	41 f4       	brne	.+16     	; 0xe60 <vfprintf+0xda>
     e50:	f6 01       	movw	r30, r12
     e52:	93 fd       	sbrc	r25, 3
     e54:	85 91       	lpm	r24, Z+
     e56:	93 ff       	sbrs	r25, 3
     e58:	81 91       	ld	r24, Z+
     e5a:	6f 01       	movw	r12, r30
     e5c:	81 11       	cpse	r24, r1
     e5e:	c1 cf       	rjmp	.-126    	; 0xde2 <vfprintf+0x5c>
     e60:	98 2f       	mov	r25, r24
     e62:	9f 7d       	andi	r25, 0xDF	; 223
     e64:	95 54       	subi	r25, 0x45	; 69
     e66:	93 30       	cpi	r25, 0x03	; 3
     e68:	28 f4       	brcc	.+10     	; 0xe74 <vfprintf+0xee>
     e6a:	0c 5f       	subi	r16, 0xFC	; 252
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	ff e3       	ldi	r31, 0x3F	; 63
     e70:	f9 83       	std	Y+1, r31	; 0x01
     e72:	0d c0       	rjmp	.+26     	; 0xe8e <vfprintf+0x108>
     e74:	83 36       	cpi	r24, 0x63	; 99
     e76:	31 f0       	breq	.+12     	; 0xe84 <vfprintf+0xfe>
     e78:	83 37       	cpi	r24, 0x73	; 115
     e7a:	71 f0       	breq	.+28     	; 0xe98 <vfprintf+0x112>
     e7c:	83 35       	cpi	r24, 0x53	; 83
     e7e:	09 f0       	breq	.+2      	; 0xe82 <vfprintf+0xfc>
     e80:	5b c0       	rjmp	.+182    	; 0xf38 <vfprintf+0x1b2>
     e82:	22 c0       	rjmp	.+68     	; 0xec8 <vfprintf+0x142>
     e84:	f8 01       	movw	r30, r16
     e86:	80 81       	ld	r24, Z
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	0e 5f       	subi	r16, 0xFE	; 254
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	44 24       	eor	r4, r4
     e90:	43 94       	inc	r4
     e92:	51 2c       	mov	r5, r1
     e94:	54 01       	movw	r10, r8
     e96:	15 c0       	rjmp	.+42     	; 0xec2 <vfprintf+0x13c>
     e98:	38 01       	movw	r6, r16
     e9a:	f2 e0       	ldi	r31, 0x02	; 2
     e9c:	6f 0e       	add	r6, r31
     e9e:	71 1c       	adc	r7, r1
     ea0:	f8 01       	movw	r30, r16
     ea2:	a0 80       	ld	r10, Z
     ea4:	b1 80       	ldd	r11, Z+1	; 0x01
     ea6:	26 ff       	sbrs	r18, 6
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <vfprintf+0x12a>
     eaa:	65 2d       	mov	r22, r5
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x12e>
     eb0:	6f ef       	ldi	r22, 0xFF	; 255
     eb2:	7f ef       	ldi	r23, 0xFF	; 255
     eb4:	c5 01       	movw	r24, r10
     eb6:	2c 87       	std	Y+12, r18	; 0x0c
     eb8:	0e 94 a0 08 	call	0x1140	; 0x1140 <strnlen>
     ebc:	2c 01       	movw	r4, r24
     ebe:	83 01       	movw	r16, r6
     ec0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec2:	2f 77       	andi	r18, 0x7F	; 127
     ec4:	22 2e       	mov	r2, r18
     ec6:	17 c0       	rjmp	.+46     	; 0xef6 <vfprintf+0x170>
     ec8:	38 01       	movw	r6, r16
     eca:	f2 e0       	ldi	r31, 0x02	; 2
     ecc:	6f 0e       	add	r6, r31
     ece:	71 1c       	adc	r7, r1
     ed0:	f8 01       	movw	r30, r16
     ed2:	a0 80       	ld	r10, Z
     ed4:	b1 80       	ldd	r11, Z+1	; 0x01
     ed6:	26 ff       	sbrs	r18, 6
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <vfprintf+0x15a>
     eda:	65 2d       	mov	r22, r5
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0x15e>
     ee0:	6f ef       	ldi	r22, 0xFF	; 255
     ee2:	7f ef       	ldi	r23, 0xFF	; 255
     ee4:	c5 01       	movw	r24, r10
     ee6:	2c 87       	std	Y+12, r18	; 0x0c
     ee8:	0e 94 95 08 	call	0x112a	; 0x112a <strnlen_P>
     eec:	2c 01       	movw	r4, r24
     eee:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef0:	20 68       	ori	r18, 0x80	; 128
     ef2:	22 2e       	mov	r2, r18
     ef4:	83 01       	movw	r16, r6
     ef6:	23 fc       	sbrc	r2, 3
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <vfprintf+0x1aa>
     efa:	83 2d       	mov	r24, r3
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	48 16       	cp	r4, r24
     f00:	59 06       	cpc	r5, r25
     f02:	b0 f4       	brcc	.+44     	; 0xf30 <vfprintf+0x1aa>
     f04:	b7 01       	movw	r22, r14
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     f0e:	3a 94       	dec	r3
     f10:	f4 cf       	rjmp	.-24     	; 0xefa <vfprintf+0x174>
     f12:	f5 01       	movw	r30, r10
     f14:	27 fc       	sbrc	r2, 7
     f16:	85 91       	lpm	r24, Z+
     f18:	27 fe       	sbrs	r2, 7
     f1a:	81 91       	ld	r24, Z+
     f1c:	5f 01       	movw	r10, r30
     f1e:	b7 01       	movw	r22, r14
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     f26:	31 10       	cpse	r3, r1
     f28:	3a 94       	dec	r3
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	4f 1a       	sub	r4, r31
     f2e:	51 08       	sbc	r5, r1
     f30:	41 14       	cp	r4, r1
     f32:	51 04       	cpc	r5, r1
     f34:	71 f7       	brne	.-36     	; 0xf12 <vfprintf+0x18c>
     f36:	e5 c0       	rjmp	.+458    	; 0x1102 <vfprintf+0x37c>
     f38:	84 36       	cpi	r24, 0x64	; 100
     f3a:	11 f0       	breq	.+4      	; 0xf40 <vfprintf+0x1ba>
     f3c:	89 36       	cpi	r24, 0x69	; 105
     f3e:	39 f5       	brne	.+78     	; 0xf8e <vfprintf+0x208>
     f40:	f8 01       	movw	r30, r16
     f42:	27 ff       	sbrs	r18, 7
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <vfprintf+0x1ce>
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	0c 5f       	subi	r16, 0xFC	; 252
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <vfprintf+0x1de>
     f54:	60 81       	ld	r22, Z
     f56:	71 81       	ldd	r23, Z+1	; 0x01
     f58:	88 27       	eor	r24, r24
     f5a:	77 fd       	sbrc	r23, 7
     f5c:	80 95       	com	r24
     f5e:	98 2f       	mov	r25, r24
     f60:	0e 5f       	subi	r16, 0xFE	; 254
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	2f 76       	andi	r18, 0x6F	; 111
     f66:	b2 2e       	mov	r11, r18
     f68:	97 ff       	sbrs	r25, 7
     f6a:	09 c0       	rjmp	.+18     	; 0xf7e <vfprintf+0x1f8>
     f6c:	90 95       	com	r25
     f6e:	80 95       	com	r24
     f70:	70 95       	com	r23
     f72:	61 95       	neg	r22
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	8f 4f       	sbci	r24, 0xFF	; 255
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	20 68       	ori	r18, 0x80	; 128
     f7c:	b2 2e       	mov	r11, r18
     f7e:	2a e0       	ldi	r18, 0x0A	; 10
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	a4 01       	movw	r20, r8
     f84:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__ultoa_invert>
     f88:	a8 2e       	mov	r10, r24
     f8a:	a8 18       	sub	r10, r8
     f8c:	44 c0       	rjmp	.+136    	; 0x1016 <vfprintf+0x290>
     f8e:	85 37       	cpi	r24, 0x75	; 117
     f90:	29 f4       	brne	.+10     	; 0xf9c <vfprintf+0x216>
     f92:	2f 7e       	andi	r18, 0xEF	; 239
     f94:	b2 2e       	mov	r11, r18
     f96:	2a e0       	ldi	r18, 0x0A	; 10
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	25 c0       	rjmp	.+74     	; 0xfe6 <vfprintf+0x260>
     f9c:	f2 2f       	mov	r31, r18
     f9e:	f9 7f       	andi	r31, 0xF9	; 249
     fa0:	bf 2e       	mov	r11, r31
     fa2:	8f 36       	cpi	r24, 0x6F	; 111
     fa4:	c1 f0       	breq	.+48     	; 0xfd6 <vfprintf+0x250>
     fa6:	18 f4       	brcc	.+6      	; 0xfae <vfprintf+0x228>
     fa8:	88 35       	cpi	r24, 0x58	; 88
     faa:	79 f0       	breq	.+30     	; 0xfca <vfprintf+0x244>
     fac:	b4 c0       	rjmp	.+360    	; 0x1116 <vfprintf+0x390>
     fae:	80 37       	cpi	r24, 0x70	; 112
     fb0:	19 f0       	breq	.+6      	; 0xfb8 <vfprintf+0x232>
     fb2:	88 37       	cpi	r24, 0x78	; 120
     fb4:	21 f0       	breq	.+8      	; 0xfbe <vfprintf+0x238>
     fb6:	af c0       	rjmp	.+350    	; 0x1116 <vfprintf+0x390>
     fb8:	2f 2f       	mov	r18, r31
     fba:	20 61       	ori	r18, 0x10	; 16
     fbc:	b2 2e       	mov	r11, r18
     fbe:	b4 fe       	sbrs	r11, 4
     fc0:	0d c0       	rjmp	.+26     	; 0xfdc <vfprintf+0x256>
     fc2:	8b 2d       	mov	r24, r11
     fc4:	84 60       	ori	r24, 0x04	; 4
     fc6:	b8 2e       	mov	r11, r24
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <vfprintf+0x256>
     fca:	24 ff       	sbrs	r18, 4
     fcc:	0a c0       	rjmp	.+20     	; 0xfe2 <vfprintf+0x25c>
     fce:	9f 2f       	mov	r25, r31
     fd0:	96 60       	ori	r25, 0x06	; 6
     fd2:	b9 2e       	mov	r11, r25
     fd4:	06 c0       	rjmp	.+12     	; 0xfe2 <vfprintf+0x25c>
     fd6:	28 e0       	ldi	r18, 0x08	; 8
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <vfprintf+0x260>
     fdc:	20 e1       	ldi	r18, 0x10	; 16
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <vfprintf+0x260>
     fe2:	20 e1       	ldi	r18, 0x10	; 16
     fe4:	32 e0       	ldi	r19, 0x02	; 2
     fe6:	f8 01       	movw	r30, r16
     fe8:	b7 fe       	sbrs	r11, 7
     fea:	07 c0       	rjmp	.+14     	; 0xffa <vfprintf+0x274>
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	0c 5f       	subi	r16, 0xFC	; 252
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <vfprintf+0x280>
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 5f       	subi	r16, 0xFE	; 254
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	a4 01       	movw	r20, r8
    1008:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__ultoa_invert>
    100c:	a8 2e       	mov	r10, r24
    100e:	a8 18       	sub	r10, r8
    1010:	fb 2d       	mov	r31, r11
    1012:	ff 77       	andi	r31, 0x7F	; 127
    1014:	bf 2e       	mov	r11, r31
    1016:	b6 fe       	sbrs	r11, 6
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <vfprintf+0x2aa>
    101a:	2b 2d       	mov	r18, r11
    101c:	2e 7f       	andi	r18, 0xFE	; 254
    101e:	a5 14       	cp	r10, r5
    1020:	50 f4       	brcc	.+20     	; 0x1036 <vfprintf+0x2b0>
    1022:	b4 fe       	sbrs	r11, 4
    1024:	0a c0       	rjmp	.+20     	; 0x103a <vfprintf+0x2b4>
    1026:	b2 fc       	sbrc	r11, 2
    1028:	08 c0       	rjmp	.+16     	; 0x103a <vfprintf+0x2b4>
    102a:	2b 2d       	mov	r18, r11
    102c:	2e 7e       	andi	r18, 0xEE	; 238
    102e:	05 c0       	rjmp	.+10     	; 0x103a <vfprintf+0x2b4>
    1030:	7a 2c       	mov	r7, r10
    1032:	2b 2d       	mov	r18, r11
    1034:	03 c0       	rjmp	.+6      	; 0x103c <vfprintf+0x2b6>
    1036:	7a 2c       	mov	r7, r10
    1038:	01 c0       	rjmp	.+2      	; 0x103c <vfprintf+0x2b6>
    103a:	75 2c       	mov	r7, r5
    103c:	24 ff       	sbrs	r18, 4
    103e:	0d c0       	rjmp	.+26     	; 0x105a <vfprintf+0x2d4>
    1040:	fe 01       	movw	r30, r28
    1042:	ea 0d       	add	r30, r10
    1044:	f1 1d       	adc	r31, r1
    1046:	80 81       	ld	r24, Z
    1048:	80 33       	cpi	r24, 0x30	; 48
    104a:	11 f4       	brne	.+4      	; 0x1050 <vfprintf+0x2ca>
    104c:	29 7e       	andi	r18, 0xE9	; 233
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <vfprintf+0x2dc>
    1050:	22 ff       	sbrs	r18, 2
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <vfprintf+0x2da>
    1054:	73 94       	inc	r7
    1056:	73 94       	inc	r7
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <vfprintf+0x2dc>
    105a:	82 2f       	mov	r24, r18
    105c:	86 78       	andi	r24, 0x86	; 134
    105e:	09 f0       	breq	.+2      	; 0x1062 <vfprintf+0x2dc>
    1060:	73 94       	inc	r7
    1062:	23 fd       	sbrc	r18, 3
    1064:	13 c0       	rjmp	.+38     	; 0x108c <vfprintf+0x306>
    1066:	20 ff       	sbrs	r18, 0
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <vfprintf+0x2f0>
    106a:	5a 2c       	mov	r5, r10
    106c:	73 14       	cp	r7, r3
    106e:	18 f4       	brcc	.+6      	; 0x1076 <vfprintf+0x2f0>
    1070:	53 0c       	add	r5, r3
    1072:	57 18       	sub	r5, r7
    1074:	73 2c       	mov	r7, r3
    1076:	73 14       	cp	r7, r3
    1078:	68 f4       	brcc	.+26     	; 0x1094 <vfprintf+0x30e>
    107a:	b7 01       	movw	r22, r14
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	2c 87       	std	Y+12, r18	; 0x0c
    1082:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    1086:	73 94       	inc	r7
    1088:	2c 85       	ldd	r18, Y+12	; 0x0c
    108a:	f5 cf       	rjmp	.-22     	; 0x1076 <vfprintf+0x2f0>
    108c:	73 14       	cp	r7, r3
    108e:	10 f4       	brcc	.+4      	; 0x1094 <vfprintf+0x30e>
    1090:	37 18       	sub	r3, r7
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <vfprintf+0x310>
    1094:	31 2c       	mov	r3, r1
    1096:	24 ff       	sbrs	r18, 4
    1098:	12 c0       	rjmp	.+36     	; 0x10be <vfprintf+0x338>
    109a:	b7 01       	movw	r22, r14
    109c:	80 e3       	ldi	r24, 0x30	; 48
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	2c 87       	std	Y+12, r18	; 0x0c
    10a2:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a8:	22 ff       	sbrs	r18, 2
    10aa:	17 c0       	rjmp	.+46     	; 0x10da <vfprintf+0x354>
    10ac:	21 ff       	sbrs	r18, 1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <vfprintf+0x330>
    10b0:	88 e5       	ldi	r24, 0x58	; 88
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x334>
    10b6:	88 e7       	ldi	r24, 0x78	; 120
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b7 01       	movw	r22, r14
    10bc:	0c c0       	rjmp	.+24     	; 0x10d6 <vfprintf+0x350>
    10be:	82 2f       	mov	r24, r18
    10c0:	86 78       	andi	r24, 0x86	; 134
    10c2:	59 f0       	breq	.+22     	; 0x10da <vfprintf+0x354>
    10c4:	21 fd       	sbrc	r18, 1
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x346>
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x348>
    10cc:	8b e2       	ldi	r24, 0x2B	; 43
    10ce:	27 fd       	sbrc	r18, 7
    10d0:	8d e2       	ldi	r24, 0x2D	; 45
    10d2:	b7 01       	movw	r22, r14
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10da:	a5 14       	cp	r10, r5
    10dc:	38 f4       	brcc	.+14     	; 0x10ec <vfprintf+0x366>
    10de:	b7 01       	movw	r22, r14
    10e0:	80 e3       	ldi	r24, 0x30	; 48
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10e8:	5a 94       	dec	r5
    10ea:	f7 cf       	rjmp	.-18     	; 0x10da <vfprintf+0x354>
    10ec:	aa 94       	dec	r10
    10ee:	f4 01       	movw	r30, r8
    10f0:	ea 0d       	add	r30, r10
    10f2:	f1 1d       	adc	r31, r1
    10f4:	80 81       	ld	r24, Z
    10f6:	b7 01       	movw	r22, r14
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    10fe:	a1 10       	cpse	r10, r1
    1100:	f5 cf       	rjmp	.-22     	; 0x10ec <vfprintf+0x366>
    1102:	33 20       	and	r3, r3
    1104:	09 f4       	brne	.+2      	; 0x1108 <vfprintf+0x382>
    1106:	51 ce       	rjmp	.-862    	; 0xdaa <vfprintf+0x24>
    1108:	b7 01       	movw	r22, r14
    110a:	80 e2       	ldi	r24, 0x20	; 32
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    1112:	3a 94       	dec	r3
    1114:	f6 cf       	rjmp	.-20     	; 0x1102 <vfprintf+0x37c>
    1116:	f7 01       	movw	r30, r14
    1118:	86 81       	ldd	r24, Z+6	; 0x06
    111a:	97 81       	ldd	r25, Z+7	; 0x07
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <vfprintf+0x39c>
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	9f ef       	ldi	r25, 0xFF	; 255
    1122:	2c 96       	adiw	r28, 0x0c	; 12
    1124:	e2 e1       	ldi	r30, 0x12	; 18
    1126:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__epilogue_restores__>

0000112a <strnlen_P>:
    112a:	fc 01       	movw	r30, r24
    112c:	05 90       	lpm	r0, Z+
    112e:	61 50       	subi	r22, 0x01	; 1
    1130:	70 40       	sbci	r23, 0x00	; 0
    1132:	01 10       	cpse	r0, r1
    1134:	d8 f7       	brcc	.-10     	; 0x112c <strnlen_P+0x2>
    1136:	80 95       	com	r24
    1138:	90 95       	com	r25
    113a:	8e 0f       	add	r24, r30
    113c:	9f 1f       	adc	r25, r31
    113e:	08 95       	ret

00001140 <strnlen>:
    1140:	fc 01       	movw	r30, r24
    1142:	61 50       	subi	r22, 0x01	; 1
    1144:	70 40       	sbci	r23, 0x00	; 0
    1146:	01 90       	ld	r0, Z+
    1148:	01 10       	cpse	r0, r1
    114a:	d8 f7       	brcc	.-10     	; 0x1142 <strnlen+0x2>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	8e 0f       	add	r24, r30
    1152:	9f 1f       	adc	r25, r31
    1154:	08 95       	ret

00001156 <fputc>:
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	18 2f       	mov	r17, r24
    1160:	09 2f       	mov	r16, r25
    1162:	eb 01       	movw	r28, r22
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 fd       	sbrc	r24, 1
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <fputc+0x1a>
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	20 c0       	rjmp	.+64     	; 0x11b0 <fputc+0x5a>
    1170:	82 ff       	sbrs	r24, 2
    1172:	10 c0       	rjmp	.+32     	; 0x1194 <fputc+0x3e>
    1174:	4e 81       	ldd	r20, Y+6	; 0x06
    1176:	5f 81       	ldd	r21, Y+7	; 0x07
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	42 17       	cp	r20, r18
    117e:	53 07       	cpc	r21, r19
    1180:	7c f4       	brge	.+30     	; 0x11a0 <fputc+0x4a>
    1182:	e8 81       	ld	r30, Y
    1184:	f9 81       	ldd	r31, Y+1	; 0x01
    1186:	9f 01       	movw	r18, r30
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	39 83       	std	Y+1, r19	; 0x01
    118e:	28 83       	st	Y, r18
    1190:	10 83       	st	Z, r17
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <fputc+0x4a>
    1194:	e8 85       	ldd	r30, Y+8	; 0x08
    1196:	f9 85       	ldd	r31, Y+9	; 0x09
    1198:	81 2f       	mov	r24, r17
    119a:	09 95       	icall
    119c:	89 2b       	or	r24, r25
    119e:	29 f7       	brne	.-54     	; 0x116a <fputc+0x14>
    11a0:	2e 81       	ldd	r18, Y+6	; 0x06
    11a2:	3f 81       	ldd	r19, Y+7	; 0x07
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	3f 83       	std	Y+7, r19	; 0x07
    11aa:	2e 83       	std	Y+6, r18	; 0x06
    11ac:	81 2f       	mov	r24, r17
    11ae:	90 2f       	mov	r25, r16
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	08 95       	ret

000011ba <__ultoa_invert>:
    11ba:	fa 01       	movw	r30, r20
    11bc:	aa 27       	eor	r26, r26
    11be:	28 30       	cpi	r18, 0x08	; 8
    11c0:	51 f1       	breq	.+84     	; 0x1216 <__ultoa_invert+0x5c>
    11c2:	20 31       	cpi	r18, 0x10	; 16
    11c4:	81 f1       	breq	.+96     	; 0x1226 <__ultoa_invert+0x6c>
    11c6:	e8 94       	clt
    11c8:	6f 93       	push	r22
    11ca:	6e 7f       	andi	r22, 0xFE	; 254
    11cc:	6e 5f       	subi	r22, 0xFE	; 254
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	af 4f       	sbci	r26, 0xFF	; 255
    11d6:	b1 e0       	ldi	r27, 0x01	; 1
    11d8:	3e d0       	rcall	.+124    	; 0x1256 <__ultoa_invert+0x9c>
    11da:	b4 e0       	ldi	r27, 0x04	; 4
    11dc:	3c d0       	rcall	.+120    	; 0x1256 <__ultoa_invert+0x9c>
    11de:	67 0f       	add	r22, r23
    11e0:	78 1f       	adc	r23, r24
    11e2:	89 1f       	adc	r24, r25
    11e4:	9a 1f       	adc	r25, r26
    11e6:	a1 1d       	adc	r26, r1
    11e8:	68 0f       	add	r22, r24
    11ea:	79 1f       	adc	r23, r25
    11ec:	8a 1f       	adc	r24, r26
    11ee:	91 1d       	adc	r25, r1
    11f0:	a1 1d       	adc	r26, r1
    11f2:	6a 0f       	add	r22, r26
    11f4:	71 1d       	adc	r23, r1
    11f6:	81 1d       	adc	r24, r1
    11f8:	91 1d       	adc	r25, r1
    11fa:	a1 1d       	adc	r26, r1
    11fc:	20 d0       	rcall	.+64     	; 0x123e <__ultoa_invert+0x84>
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__ultoa_invert+0x48>
    1200:	68 94       	set
    1202:	3f 91       	pop	r19
    1204:	2a e0       	ldi	r18, 0x0A	; 10
    1206:	26 9f       	mul	r18, r22
    1208:	11 24       	eor	r1, r1
    120a:	30 19       	sub	r19, r0
    120c:	30 5d       	subi	r19, 0xD0	; 208
    120e:	31 93       	st	Z+, r19
    1210:	de f6       	brtc	.-74     	; 0x11c8 <__ultoa_invert+0xe>
    1212:	cf 01       	movw	r24, r30
    1214:	08 95       	ret
    1216:	46 2f       	mov	r20, r22
    1218:	47 70       	andi	r20, 0x07	; 7
    121a:	40 5d       	subi	r20, 0xD0	; 208
    121c:	41 93       	st	Z+, r20
    121e:	b3 e0       	ldi	r27, 0x03	; 3
    1220:	0f d0       	rcall	.+30     	; 0x1240 <__ultoa_invert+0x86>
    1222:	c9 f7       	brne	.-14     	; 0x1216 <__ultoa_invert+0x5c>
    1224:	f6 cf       	rjmp	.-20     	; 0x1212 <__ultoa_invert+0x58>
    1226:	46 2f       	mov	r20, r22
    1228:	4f 70       	andi	r20, 0x0F	; 15
    122a:	40 5d       	subi	r20, 0xD0	; 208
    122c:	4a 33       	cpi	r20, 0x3A	; 58
    122e:	18 f0       	brcs	.+6      	; 0x1236 <__ultoa_invert+0x7c>
    1230:	49 5d       	subi	r20, 0xD9	; 217
    1232:	31 fd       	sbrc	r19, 1
    1234:	40 52       	subi	r20, 0x20	; 32
    1236:	41 93       	st	Z+, r20
    1238:	02 d0       	rcall	.+4      	; 0x123e <__ultoa_invert+0x84>
    123a:	a9 f7       	brne	.-22     	; 0x1226 <__ultoa_invert+0x6c>
    123c:	ea cf       	rjmp	.-44     	; 0x1212 <__ultoa_invert+0x58>
    123e:	b4 e0       	ldi	r27, 0x04	; 4
    1240:	a6 95       	lsr	r26
    1242:	97 95       	ror	r25
    1244:	87 95       	ror	r24
    1246:	77 95       	ror	r23
    1248:	67 95       	ror	r22
    124a:	ba 95       	dec	r27
    124c:	c9 f7       	brne	.-14     	; 0x1240 <__ultoa_invert+0x86>
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	61 05       	cpc	r22, r1
    1252:	71 05       	cpc	r23, r1
    1254:	08 95       	ret
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	0a 2e       	mov	r0, r26
    125c:	06 94       	lsr	r0
    125e:	57 95       	ror	r21
    1260:	47 95       	ror	r20
    1262:	37 95       	ror	r19
    1264:	27 95       	ror	r18
    1266:	ba 95       	dec	r27
    1268:	c9 f7       	brne	.-14     	; 0x125c <__ultoa_invert+0xa2>
    126a:	62 0f       	add	r22, r18
    126c:	73 1f       	adc	r23, r19
    126e:	84 1f       	adc	r24, r20
    1270:	95 1f       	adc	r25, r21
    1272:	a0 1d       	adc	r26, r0
    1274:	08 95       	ret

00001276 <__prologue_saves__>:
    1276:	2f 92       	push	r2
    1278:	3f 92       	push	r3
    127a:	4f 92       	push	r4
    127c:	5f 92       	push	r5
    127e:	6f 92       	push	r6
    1280:	7f 92       	push	r7
    1282:	8f 92       	push	r8
    1284:	9f 92       	push	r9
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	ca 1b       	sub	r28, r26
    12a0:	db 0b       	sbc	r29, r27
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	09 94       	ijmp

000012ae <__epilogue_restores__>:
    12ae:	2a 88       	ldd	r2, Y+18	; 0x12
    12b0:	39 88       	ldd	r3, Y+17	; 0x11
    12b2:	48 88       	ldd	r4, Y+16	; 0x10
    12b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    12bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    12be:	aa 84       	ldd	r10, Y+10	; 0x0a
    12c0:	b9 84       	ldd	r11, Y+9	; 0x09
    12c2:	c8 84       	ldd	r12, Y+8	; 0x08
    12c4:	df 80       	ldd	r13, Y+7	; 0x07
    12c6:	ee 80       	ldd	r14, Y+6	; 0x06
    12c8:	fd 80       	ldd	r15, Y+5	; 0x05
    12ca:	0c 81       	ldd	r16, Y+4	; 0x04
    12cc:	1b 81       	ldd	r17, Y+3	; 0x03
    12ce:	aa 81       	ldd	r26, Y+2	; 0x02
    12d0:	b9 81       	ldd	r27, Y+1	; 0x01
    12d2:	ce 0f       	add	r28, r30
    12d4:	d1 1d       	adc	r29, r1
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	ed 01       	movw	r28, r26
    12e2:	08 95       	ret

000012e4 <_exit>:
    12e4:	f8 94       	cli

000012e6 <__stop_program>:
    12e6:	ff cf       	rjmp	.-2      	; 0x12e6 <__stop_program>
